/* 
 * Ideas for better initialization syntax for classes and arrays.
 * Options are not necessarily mutually-exclusive.
 */

// ExampleA: Tuning configuration in Wizard for the interpreter generator.
class FastIntTuning {
	def threadedDispatch = true;	// inline dispatch at the end of every handler
	def handlerAlignment = 8;	// align handler code in memory
	def skipRepeatedBlocks = true;	// skip repeated BLOCK bytecodes
	def dispatchEntrySize = 4;	// size of each dispatch table entry
	def inlineAllLEBs = false;	// always inline LEB slow cases
	def fourByteSidetable = true;	// sidetable entries are 4-bytes
	def entryTierUpDecrement = 1;	// "cost" of entering a function in the interpreter
	def loopTierUpDecrement = 1;	// "cost" of looping in the interpreter
	var debug = false;		// configure debugging at runtime
	var trace = false;		// configure tracing at runtime
}

// Status quo. Default-initialized instance.
def stdConfig = FastIntTuning.new();

// Option 1.
// Syntax to allocate and initialize a new object with named field initialization.
// The "MyClass.new() { }" syntactic form allows ".field = expr;" statements inside
// and can override the values of fields.
//   (Detailed rules TBD, because we want to alter def-fields here).
//   (Also not sure if ".fieldName = expr;" is better than "fieldName = expr,")
def testConfig = FastIntTuning.new() with {
	.inlineAllLEBs = true;
	.fourByteSidetable = false;
};

// Option 2.
// Syntax to alter in-place mutable fields of an object.
// The "with" keyword operation takes the object resulting from an expression on the left hand
// side, mutates it, and returns it as its result. This allows getting expression, mutating it
// a little, and then passing it on.
def result = run(stdConfig with { debug = true });

// Multiple fields can be updated.
def result = run(stdConfig with { debug = true, trace = true });

// It has the nice property that it chains.
def result = run(stdConfig with { debug = true } with { trace = true });

// Example B: class representing a configuration.
class Config {
	def enableThing1: bool;
	def enableThing2: bool;
	def optLevel: int;
	def canooterValves: bool;
	var debug: bool;
}

var standardConfig = Config.new {
	.enableThing1 = true;
	.enableThing2 = false;
	.optLevel = 3;
	.canooterValues = false;
};

// Comparison with JSON:
var standardConfig = { "enableThing1": true, "enableThing2": false, "optLevel": 3, "canooterValues": false };

// Option 3a: copy-mutate expression: clone keyword
// The "clone" operation takes the object resulting from an expression on the left hand side,
// makes a copy, mutates the copy, and returns the copy.
var modifiedConfig = standardConfig clone {
	.debug = false;
};

// Option 3b: make it appear like a method call.
var debugConfig = standardConfig.clone() with {
	.debug = false;
};

// Option 4: Allowing initialization of explicit array elements.
// The body of a "with" block can contain updates to array elements.
// The syntax mirrors element assignment.
var w = Array<int>.new(67) with {
	[33] = 9897234;
	[66] = -98734;
}

// Option 4 syntax also would work nicely for application classes that define
// the indexing assign operator.
var h = HashMap<string, V>.new() with {
	["foo"]  = V1;
	["foo2"] = V1;
	["foo3"] = V1;
	["bar"]  = V2;
}

// Option 5: Syntax for building enum maps.
// The syntax would allow building efficient enum maps.
enum E { X, Y, Z }
var x = E.map<bool> with {
	X = true;
	Y = false;
	Z = true;
}

// More tinkering. How do they look when modeling complex argument lists?
class ComplexArgs {
	var x: bool;
	var y: bool;
	var w: bool;
	var z: bool;
	var t: bool;
	var u: bool;
	var name: string;
}
def run(args: ComplexArgs) {
	if (Strings.startsWith(args.name, "Foo")) ;
	else if (args.x) ;
	// ...
}
run(ComplexArgs.new { name = "FooBar", x = true, y = true });


/*
 * Idea: better syntax for forwarding arguments to superclass constructors.
 */

/*
 * Example A: simple tree hierarchy where the top class has several fields.
 * Problem: subclasses have to repeat the superclass's constructor arguments and forward them.
 */

// Status quo:
class A(x: int, y: int) {
}

class B1 extends A {
	new(x: int, y: int) super(x, y) { } // Current 1: ugly; forwarding constructor
}

class B2(xx: int, yy: int) extends A(xx, yy) { // Current 2: ugly; duplicate fields
}

class C1 extends A {
	def hotness: int;
	new(x: int, y: int, hotness) super(x, y) { } // Current 1: ugly; added constructor argument
}

// Option 1: Use the "super" keyword to refer to superclass's constructor params/args.
class M(x: int, y: int) {
}

class N(super) extends M { // option 1: forwarding constructor
}

class P(super, hotness: int) extends M { // option 1: added constructor argument after
}

class Q(hotness: int, super) extends M { // option 1: added constructor argument before
}

class R extends M {
	var stuff: long;
	new(super, input: int) { // option 1: super params/args automatically forwarded in constructor declaration
		stuff = input + 44;
	}
}

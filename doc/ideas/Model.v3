/*
 * Ideas for programmable meta objects and meta classes.
 * Instead of using the vague and slightly intimidating "meta" word, we'll use "model".
 */

/*
 * Example A: Vehicles.
 * 1. Vehicles have models which describe the shape of their wheels.
 * 2. Vehicles have object identity, but the only other distinguishing characteristics of a vehicle are its color and its model.
 * 3. Cars are vehicles that have a number of doors, fixed by the model of car, that can be broken off doing stunts.
 * 4. Motorcycles are two-wheeled vehicles may optionally have a windshield or a chopper configuration.
 * 5. The wheel configuration of a vehicle is extremely often used, because roads only interface with wheels.
 * 6. Assume cars and vehicles are allocated frequently, models less so. Optimize space usage.
*/

// Preliminaries: wheel configs and colors.
type WheelConfig {
	case Unicycle;
	case Bicycle;
	case Tricycle;
	case Quad;
	case More(count: u7);
}
enum Color {
	BLACK, RED, YELLOW, BLUE
}

/*
 * Option 1: new Virgil syntax for declaring a "model".
 * The syntax is:
     model MyClass.link {
         class MyClass { ... }
     }
 * A /model/ is the "metaclass" of a class and syntactically has the class nested inside it.
 * Every instance of the (inner) class has a reference to an instance of the model (outer) class that created it.
 * The two occurrences of "MyClass" in the syntax must be the same valid identifier.
 * The "link" name must be a valid identifier or the keyword "model".
 * The (outer) model class is like a regular class when used by itself. It can extend another
   class, have methods, be instantiated with "new", etc. It just has a special dotted name.
 * The inner class "MyClass" has its name available at the top level. Its name is not
   "MyClass.link.MyClass"--its "MyClass", because it is the common thing which is frequently written.
 * The ".link" part of the model name also indicates the name of a field implicitly declared
   in "MyClass" that will point to the enclosing "MyClass.link" instance.
 * Instances of "MyClass" can only be allocated in the scope of "MyClass.link".
   Their implicit "link" field will be initialized to point to the containing model instance,
   which is guaranteed to be non-null and definitely initialized.
*/

// Option 1 defining a vehicle.
// A basic vehicle has a color and a model. We store the color directly in the car, but
// factor out the wheel config into the Vehicle.model.
//  - vehicle.model points to instance of Vehicle.model, which can't be null
//  => can be packed into single 64-bit object
model Vehicle.model(wheels: WheelConfig) {		// "Vehicle.model" name lifted to top level
	class Vehicle(color: Color) {			// "Vehicle" name lifted to top level
		def dup() -> Vehicle;			// abstrat method to make a copy
	}
	// no methods here, which means no way to make a Vehicle directly.
}

// Option 1: define a car, which is a subclass of vehicle.
// Cars are limited in that they always have a quad wheel config.
// Cars are special in that they also have doors. They start having a number of doors dictated by their model.
// Then cars can lose doors in stunts. We want cars to always have a Car.model that stores the number
// of doors cars are expected to start with.
//  - Car has a {color} field and a new {doors} field.
//  - object header points to an instance of Car.model, which can't be null
//  => can be packed into a single 64-bit object
model Car.model(doors: u6) extends Vehicle.model(WheelConfig.Quad) {	// "Car.model" name lifted to top level
	class Car extends Vehicle {					// "Car" name lifted to top level
		def var doors: u6;
		new(color: Color, doors) super(color) { }

		def dup() -> Car { return Car.new(color, doors); }	// makes a copy
		def doStunt(random: int -> int) -> this {
			if (doors > 0 && random(6) == 0) doors--; // unlucky stunt busted off a door
		}
	}
	// It's only legal to make a Car inside Car.model.
	def make(color: Color) -> Car {
		return Car.new(color, doors);
	}
}

// Option 1: define a motorcyle, which is a subclass of vehicle.
// Motorcycles are limited in that they always have a bicycle wheel config.
// Motorcycles are special in that they can have a windshield and might be a chopper.
// Motorcycles are not mutable, and they can't do stunts like cars. Motorcycles are
// also limited to Color.BLACK.
model Motorcycle.model(windshield: bool, chopper: bool) extends Vehicle.model(WheelConfig.Bicycle) {
	class Motorcycle extends Vehicle(Color.BLACK) {			// "Motorcycle" lifted to top level
		def dup() -> Motorcycle { return Motorcycle.new(); }	// makes a copy
	}
	// It's only legal to make a Motorcycle in a Motorcycle.model.
	def make() -> Motorcycle {
		return Motorcycle.new();
	}
}

// Example usages of the above definitions.
def main() {
	def v1 = Vehicle.new();					// ERROR: illegal outside model

	def m1 = Vehicle.model.new(WheelConfig.Bicycle);	// create new model of vehicle

	def m2 = Car.model.new(4);				// create new 4-door car model
	def c1: Car = m2.make(Color.RED);			// create new red car
	assert(m2 == c1.model);					// every car remembers its model
	var r = c1.doStunt().doStunt();				// do two stunts in a row

	def m3 = JetCar.model.new(JetEngineDesign.TURBOFAN);	// create a new jetcar model
	def c1: Car = m3.make(Color.RED);			// create a new jetcar, which is just a Car

	def m4 = Motorcyle.model.new(true, false);		// create a new motorcycle model
	def mc1 = m4.make();					// create a new motorcycle
}

// This file has a secret jet engine project!
private enum JetEngineDesign {
	TURBOFAN, AERO_SPIKE
}

// Option 1: define a private JetCar.model, which is a special kind of model.
// JetCar models can only have 2 doors.
// Private means it cannot be named outside this file.
private model JetCar.model(jet: JetEngineDesign) extends Car.model(2) {
	// JetCar instances are not special (i.e. no subclass of Car). Only the model is special.
}



/*
 * Example B: modeling Wasm GC objects in V3 implementation and Native.
 * 1. Wasm structs and arrays have declarations that have finality, a super type, and fields or element types.
 * 2. Every wasm struct or array instance refers to its declaration.
 * 3. On native targets, we want to allow storing the fields in an extension of a struct or array instance.
 * 4. We want to optimize space by collapsing Virgil's metadata with our model classes, i.e. allow the
      model class instance to serve as the metaobject.
 */

// The superclass of both host and wasm objects.
class Object {
	def render(buf: StringBuilder) -> StringBuilder;
}

// The superclass of all host objects.
class HostObject extends Object {
	def render(buf: StringBuilder) -> StringBuilder;
}

// Superclass of all module-level declarations.
class Decl {
}

// Superclass of all heap type declarations. All heap types are (or should be) canonicalized.
model HeapType.decl(final: bool, superTypes: Array<HeapTypeDecl>) extends Decl {
	def var canon_id: int;			// computed during canonicalization
}

// Signatures are heap types.
model Sig.decl extends HeapType.decl {
	def paramTypes: Array<ValueType>;
	def resultTypes: Array<ValueType>;
	new(final: bool, superTypes: Array<HeapTypeDecl>, paramTypes, resultTypes) super(final, superTypes) { }
}

// All wasm objects have to come from a declaration.
// Here we use a model class to represent declarations, and instances of the declaration are inside.
model WasmObject.decl extends HeapType.decl {
	new(final: bool, superTypes: Array<HeapTypeDecl>) super(final, superTypes) { }

	// WasmObject is the supertype of all wasm objects.
	class WasmObject extends Object {
	}
}

// All wasm struct instances come from a declaration.
// A struct declaration has the finality, the supertypes, and the field types.
// Different target platforms will represent Wasm struct instances differently
model WasmStruct.decl extends WasmObject.decl {
	def fieldTypes: Array<StorageType>;
	new(final: bool, superTypes: Array<HeapTypeDecl>, fieldTypes) super(final, superTypes) { }
	def alloc() -> WasmStruct;		// abstract; implemented by V3 or Native

	class WasmStruct extends WasmObject {
		def [i: int] -> Value;		// abstract; read a field
		def [i: int] = val: Value;	// abstract; write a field
	}
}

// All wasm arrays instances come from a declaration.
// An array declaration has the finality, the supertypes, and an element type.
// Different target platforms will represent Wasm array instances differently
model WasmArray.decl extends WasmObject.decl {
	def elemType: StorageType;
	new(final: bool, superTypes: Array<HeapTypeDecl>, elemType) super(final, superTypes) { }
	def alloc(len: u31) -> WasmArray;	// abstract; implemented by V3 or Native

	class WasmArray extends WasmObject {
		def [i: int] -> Value;		// abstract; read an element
		def [i: int] = val: Value;	// abstract; write an element
		def length() -> u31;		// abstract; get length
	}
}

//================================================================================================
// V3 implementation of WasmStruct and WasmArray
//================================================================================================
// The V3 implementation of Wasm struct instances just uses boxed values.
model V3WasmStruct.decl extends WasmStruct.decl {
	new(final: bool, superTypes: Array<HeapTypeDecl>, fieldTypes: Array<StorageType>)
		super(final, superTypes, fieldTypes) { } // XXX: redeclaration of constructor
	def alloc() -> V3WasmStruct { return V3WasmStruct.new(); }

	class V3WasmStruct extends WasmStruct {
		private def fields = Array<Value>.new(fieldTypes.length);
		def [i: int] -> Value		{ return fields[i]; }
		def [i: int] = val: Value	{ fields[i] = fieldTypes.assertAssignable(val); }
	}
}

// The V3 implementation of Wasm array instances just uses boxed values.
model V3WasmArray.decl extends WasmArray.decl {
	new(final: bool, superTypes: Array<HeapTypeDecl>, elemType: StorageType)
		super(final, superTypes) { } // XXX: redeclaration of constructor
	def alloc(len: u31) -> V3WasmArray { return V3WasmArray.new(len); }

	class V3WasmArray(len: u31) extends WasmArray {
		private def elems = Array<Value>.new(len);
		def [i: int] -> Value		{ return elems[i]; }
		def [i: int] = val: Value	{ elems[i] = elemType.assertAssignable(val); }
		def length() -> u31		{ return u31.!(elems.length); }
	}
}

// Factory methods to make new declarations.
component V3Objects {
	def defineStruct = V3WasmStructDecl.new;
	def defineArray = V3WasmArray.new;
}

//================================================================================================
// Native implementation of WasmStruct and WasmArray
//================================================================================================

// A native wasm struct has a special layout where fields are appended to the end of the NativeWasmStruct
// instance through some runtime magic.
// The #runtime-extensible and #meta annotations are representation hints that allow runtime programmability,
// but have no semantic meaning at the source level.
model NativeWasmStruct.decl extends WasmStruct.decl #runtime-extensible #meta {
	def fieldOffsets: Array<u31>;		// maps fields to their offset in the extension
	def extra: u31;				// total size of extension of instance
	new(final: bool, superTypes: Array<HeapTypeDecl>, fieldTypes: Array<StorageType>, fieldOffsets, extra)
		super(final, superTypes, fieldTypes) { } // XXX: redeclaration of constructor
	def alloc() -> NativeWasmStruct {
		return CiRuntime.newExtended<NativeWasmStruct>(extra); // some runtime magic
	}

	class NativeWasmStruct extends WasmStruct { #frequent
		def [i: int] -> Value {
			return NativeObjects.read_value(this, fieldOffsets[i], fieldTypes[i]);
		}
		def [i: int] = val: Value {
			return NativeObjects.write_value(this, fieldOffsets[i], fieldTypes[i], val);
		}
	}
}

// A native wasm array has a special layout where the elements are appended to the end of the NativeWasmArray.
// The #runtime-extensible and #meta annotations are representation hints that allow runtime programmability,
// but have no semantic meaning at the source level.
model NativeWasmArray.decl extends WasmArray.decl #runtime-extensible #meta {
	def elemSize: u31;
	new(final: bool, superTypes: Array<HeapTypeDecl>, elemType: StorageType, elemSize)
		super(final, superTypes, elemType) { }
	def alloc(len: u31) -> NativeWasmArray {
		var extra = elemSize * len;
		return CiRuntime.newPadded<NativeWasmArray>(extra, len);	// some runtime magic
	}

	class NativeWasmArray(len: u31) extends WasmArray { #frequent
		def [i: int] -> Value {
			if (i < 0 || i >= len) System.error("BoundsCheckException", "");
			return NativeObjects.read_value(this, elemSize * i, elemType);
		}
		def [i: int] = val: Value {
			elemType.assertAssignable(val);
			if (i < 0 || i >= len) System.error("BoundsCheckException", "");
			return NativeObjects.write_value(this, elemSize * i, elemType, val);
		}
		def length() -> u31 {
			return len;
		}
	}
}

// Factory and utility methods for native objects.
component NativeObjects {
	def defineStruct(final: bool, superTypes: Array<WasmType>, fieldTypes: Array<StorageType>) -> NativeWasmStruct.decl {
		var fieldOffsets = Array<int>.new(fieldTypes.length);
		// TODO: need to compute fieldOffsets
		return NativeWasmStruct.decl.new(final, superTypes, fieldTypes, fieldOffsets);
	}

	def defineArray(final: bool, superTypes: Array<WasmType>, elemType: StorageType) -> NativeWasmArray.decl {
		var elemSize = 0;
		// TODO: need to compute elemSize
		return NativeWasmArray.decl.new(final, superTypes, elemType, elemSize);
	}

	def read_value<T>(obj: T, offset: int, ft: StorageType) -> Value {
		var ptr = Pointer.atEnd(obj) + offset;
		match (ft.rep) {
			I8 =>	return Value.I32(u32.view(ptr.load<i8>()));
			U8 =>	return Value.I32(u32.view(ptr.load<u8>()));
			I16 =>	return Value.I32(u32.view(ptr.load<i16>()));
			U16 =>	return Value.I32(u32.view(ptr.load<u16>()));
			I32 =>	return Value.I32(u32.view(ptr.load<u32>()));
			I64 =>	return Value.I64(ptr.load<u64>());
			F32 =>	return Value.F32(ptr.load<u32>());
			F64 =>	return Value.F64(ptr.load<u64>());
			V128 =>	return Value.V128(ptr.load<u64>(), (ptr + 8).load<u64>());
			REF =>	return Value.Ref(ptr.load<Object>());
		}
	}
	def write_value<T>(obj: T, offset: int, ft: StorageType, v: Value) {
		ft.assertAssignable(v);
		var ptr = Pointer.atEnd(obj) + offset;
		match (ft.rep) {
			I8 =>	ptr.store<i8>(i8.view(low32(v)));
			U8 =>	ptr.store<u8>(u8.view(low32(v)));
			I16 =>	ptr.store<i16>(i16.view(low32(v)));
			U16 =>	ptr.store<u16>(u16.view(low32(v)));
			I32 =>	ptr.store<u32>(low32(v));
			I64 =>	ptr.store<u64>(Value.I64.!(v).val);
			F32 =>	ptr.store<u32>(Value.F32.!(v).val);
			F64 =>	ptr.store<u64>(Value.F64.!(v).val);
			V128 =>	{
				var w = Value.V128.!(v);
				(ptr + 0).store<u64>(w.low);
				(ptr + 8).store<u64>(w.high);
			}
			REF =>	ptr.store<Object>(Value.Ref.!(v).val);
		}
	}
	def low32(v: Value) -> u32 {
		match (v) {
			I32(val) => return val;
			I64(val) => return u32.view(val);
			_ => System.error("TypeCheckException", "expected Value.I32 or Value.I64");
		}
		return 0;
	}
}

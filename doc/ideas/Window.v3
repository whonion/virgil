// Represents a window over an underlying range of data and offers a number of utilities
// for advancing over the window while both reading or writing.
class Window<T> {
	var startAddress: u64;		// Address of the start of {data}.
	def var data: Range<T>;		// Complete data.
	def var range: Range<T>;	// Current range in the data.
	def var pos: u32;		// Position of the range in the data.

	// Returns {true} if there is more data to read, or more space to write.
	def more() -> bool {
		return range.length > 0;
	}
	// Gets the address of the current position, i.e. adding the {startAddress}.
	def posAddress() -> u64 {
		return pos + startAddress;
	}
	// Reset {data} with {new_data}, resetting {pos = 0} and {range = data}.
	def resetData(new_data: Range<T>) -> this {
		this.data = this.range = data;
		this.pos = 0;
	}
	// Resets the range in this window to start at {new_pos} and have length {new_len}.
	// If the new range is out of bounds of {data}, it will be truncated to fit into
	// {data}.
	def resetRange(new_pos: u32, new_len: u32) -> this {
		if (new_pos > data.length) {
			pos = u32.!(data.length);
			range = null;
			return;
		}
		var remain = data.length - long.!(new_pos);
		if (remain < 0) {
			pos = new_pos;
			range = data[new_pos ...];
			return;
		}
		pos = new_pos;
		range = data[new_pos ..+ new_len];
	}
	// Resets the position to {new_pos}. If the new position is out of bounds of {data},
	// it will be truncated.
	def resetPos(new_pos: u32) -> this {
		if (new_pos > data.length) {
			pos = u32.!(data.length);
			range = null;
		} else {
			pos = new_pos;
			range = data[new_pos ...];
		}
	}
	// Peek at the contiguous range of data starting at {pos}, i.e. {range[0 ... n]}, but
	// do not advance the position. If the current range is smaller than {n}, then return
	// only the remaining range.
	def peek(n: u32) -> Range<T> {
		if (range.length < n) return range;
		return range[0 ... n];
	}
	// View a contiguous range of data starting at {pos}, i.e. {range[0 ... n]} and advance
	// the position. If the current range is smaller than {n}, then return only the remaining
	// range.
	def advance(n: u32) -> Range<T> {
		if (range.length < n) {
			var result = range;
			pos += u32.!(range.length);
			range = null;
			return result;
		}
		var result = range[0 ... n];
		range = range[n ...];
		pos += n;
		return result;
	}
	// Skip {n} elements of data, advancing the position. If the current range is smaller than
	// {n}, advance by its length.
	def skip(n: u32) -> this {
		if (range.length < n) {
			pos += u32.!(range.length);
			range = null;
		} else {
			pos += n;
			range = data[n ...];
		}
	}
}

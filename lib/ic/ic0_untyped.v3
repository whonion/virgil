// Copyright 2023 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The untyped, raw, system interface for the Internet Computer.
import component ic0 {
	//  function_name(sig)									callable when?
	def msg_arg_data_size() -> i32;								// I U Q Ry F
	def msg_arg_data_copy(dst: i32, offset: i32, size: i32);				// I U Q Ry F
	def msg_caller_size() -> i32;								// I G U Q F
	def msg_caller_copy(dst: i32, offset: i32, size: i32);		 			// I G U Q F
	def msg_reject_code() -> i32;								// Ry Rt
	def msg_reject_msg_size() -> i32;							// Rt
	def msg_reject_msg_copy(dst: i32, offset: i32, size: i32);				// Rt

	def msg_reply_data_append(src: i32, size: i32);			 			// U Q Ry Rt
	def msg_reply();						 			// U Q Ry Rt
	def msg_reject(src: i32, size: i32);							// U Q Ry Rt

	def msg_cycles_available() -> i64;							// U Rt Ry
	def msg_cycles_available128(dst: i32);				  			// U Rt Ry
	def msg_cycles_refunded() -> i64;							// Rt Ry
	def msg_cycles_refunded128(dst: i32);				  			// Rt Ry
	def msg_cycles_accept(max_amount: i64) -> i64;		  				// U Rt Ry
	def msg_cycles_accept128(max_amount_high: i64, max_amount_low: i64, dst: i32);		// U Rt Ry

	def canister_self_size() -> i32;							// *
	def canister_self_copy(dst: i32, offset: i32, size: i32);				// *
	def canister_cycle_balance() -> i64;							// *
	def canister_cycle_balance128(dst: i32);						// *
	def canister_status() -> i32;								// *
	def canister_version() -> i64;								// *  
	def msg_method_name_size() -> i32;							// F
	def msg_method_name_copy(dst: i32, offset: i32, size: i32);				// F
	def accept_message();						  			// F

	def call_new(										// U Ry Rt T
		callee_src : i32,
		callee_size: i32,
		name_src: i32,
		name_size: i32,
		reply_fun: i32,
		reply_env: i32,
		reject_fun: i32,
		reject_env: i32);
	def call_on_cleanup(func: i32, env: i32);						// U Ry Rt T
	def call_data_append(src: i32, size: i32);						// U Ry Rt T
	def call_cycles_add(amount: i64);							// U Ry Rt T
	def call_cycles_add128(amount_high: i64, amount_low: i64);				// U Ry Rt T
	def call_perform() -> i32;								// U Ry Rt T

	def stable_size() -> i32;								// *
	def stable_grow(new_pages: i32) -> i32;		    					// *
	def stable_write(offset: i32, src: i32, size: i32);					// *
	def stable_read(dst: i32, offset: i32, size: i32);					// *
	def stable64_size() -> i64;				 				// *
	def stable64_grow(new_pages: i64) -> i64;						// *
	def stable64_write(offset: i64, src: i64, size: i64);					// *
	def stable64_read(dst: i64, offset: i64, size: i64);					// *

	def certified_data_set(src: i32, size: i32);						// I G U Ry Rt T
	def data_certificate_present() -> i32;							// *
	def data_certificate_size() -> i32;							// *
	def data_certificate_copy(dst: i32, offset: i32, size: i32);				// *

	def time() -> i64;									// *
	def global_timer_set(timestamp: i64) -> i64;						// I U Ry Rt C T
	def performance_counter(t: i32) -> i64;							// * s

	def debug_print(src: i32, size: i32);							// * s
	def trap(src: i32, size: i32);								// * s
}

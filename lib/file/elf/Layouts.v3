// Copyright 2022 Virgil Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Enumeration of the constants for ElfHeader.e_machine
enum ElfMachine(code: byte) {
	EM_NONE(0),
	EM_386(3),
	EM_MIPS(8),
	EM_PPC(20),
	EM_PPC64(21),
	EM_ARM(40),
	EM_X86_64(62),
	EM_AARCH64(183),
	EM_RISCV(243)
}

// Enumeration for the constants for ElfProgramHeader.p_type
enum ElfPhType(code: byte) {
	PT_NULL(0),
	PT_LOAD(1),
	PT_DYNAMIC(2),
	PT_INTERP(3),
	PT_NOTE(4),
	PT_SHLIB(5),
	PT_PHDR(6)
}

// 32-bit little endian header
layout ElfHeader32le {
	+0	magic: 		u32; // == "\x7fELF"
	+4	ei_class: 	byte;
	+5	ei_version:	byte;
	+16	e_type:		u16;
	+18	e_machine: 	u16; // ElfMachine
	+20	e_entry:	u32;
	+24	e_phoff:	u32;
	+28	e_shoff:	u32;
	+32	e_flags:	u32; // TODO: define flags
	+36	e_ehsize:	u16;
	+38	e_phentsize:	u16;
	+40	e_num_ph:	u16;
	+42	e_shentsize:	u16;
	+44	e_num_sh:	u16;
	+46	e_shstrndx:	u16;
	=48;
}

// 32-bit little endian program header
layout ElfProgramHeader32le {
	+0	p_type:		u32;
	+4	p_offset:	u32;
	+8	p_vaddr:	u32;
	+12	p_paddr:	u32;
	+16	p_filesz:	u32;
	+20	p_memsz:	u32;
	+24	p_flags:	u32; // TODO: define flags
	+28	p_align:	u32;
	=32;
}

// 32-bit little-endian section header
layout ElfSectionHeader32le {
	+0	sh_name:	u32;
	+4	sh_type:	u32;
	+8	sh_flags:	u32;
	+12	sh_addr:	u32;
	+16	sh_offset:	u32;
	+20	sh_size:	u32;
	+24	sh_link:	u32;
	+28	sh_info:	u32;
	+32	sh_addralign:	u32;
	+36	sh_entsize:	u32;
	=40;
}

// Little-endian representation of a symbol
layout ElfSymbol32le {
	+0	st_name:	u32;
	+4	st_value:	u32;
	+8	st_size:	u32;
	+12	st_info:	byte;
	+13	st_other:	byte;
	+14	st_index:	u16;
	=16;
}

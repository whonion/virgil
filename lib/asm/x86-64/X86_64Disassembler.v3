// Copyright 2024 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Addressing modes describe the possible combinations of operands to instructions.
type X86_64AddrMode {
	case none;
	case imm_b(i: byte);
	case r(a: X86_64Gpr);
	case r_r(a: X86_64Gpr, b: X86_64Gpr);
	case r_m(a: X86_64Gpr, b: X86_64Addr);
	case m_r(a: X86_64Addr, b: X86_64Gpr);
	case r_b(a: X86_64Gpr, i: byte);
	case m_b(a: X86_64Addr, i: byte);
	case r_i(a: X86_64Gpr, i: int);
	case m_i(a: X86_64Addr, i: int);
	case r_l(a: X86_64Gpr, i: long);
	case r_s(a: X86_64Gpr, b: X86_64Xmmr);
	case s_s(a: X86_64Xmmr, b: X86_64Xmmr);
	case s_m(a: X86_64Xmmr, b: X86_64Addr);
	case m_s(a: X86_64Addr, b: X86_64Xmmr);
	case s_r(a: X86_64Xmmr, b: X86_64Gpr);

	def render(buf: StringBuilder) -> StringBuilder { // TODO: pass operand size
		match (this) {
			none => 	;
			imm_b(i) =>	buf.putd(i);
			r(a) =>		buf.puts(a.name64);
			r_r(a, b) =>	buf.puts(a.name64).csp().puts(b.name64);
			r_m(a, b) =>	buf.puts(a.name64).csp().putq(b.render);
			m_r(a, b) =>	buf.putq(a.render).csp().puts(b.name64);
			r_b(a, i) =>	buf.puts(a.name64).csp().putx(i);
			m_b(a, i) =>	buf.putq(a.render).csp().putx(i);
			r_i(a, i) =>	buf.puts(a.name64).csp().putx(i);
			m_i(a, i) =>	buf.putq(a.render).csp().putx(i);
			r_l(a, i) =>	buf.puts(a.name64).csp().putx(i);
			r_s(a, b) => buf.puts(a.name64).csp().puts(b.name);
			s_s(a, b) => buf.puts(a.name).csp().puts(b.name);
			s_m(a, b) => buf.puts(a.name).csp().putq(b.render);
			m_s(a, b) => buf.putq(a.render).csp().puts(b.name);
			s_r(a, b) => buf.puts(a.name).csp().puts(b.name64);
		}
		return buf;
	}
}

// Visitor for instructions as they are disassembled. Users of this API can override
// either specific addressing mode methods (avoiding ADTs) or just the generic visit method.
class X86_64DisVisitor {
	// Generic visit routine for any addressing mode.
	def visit(prefixes: X86_64Prefix.set, name: string, mode: X86_64AddrMode) { }

	def visit_none(prefixes: X86_64Prefix.set, name: string) { visit(prefixes, name, X86_64AddrMode.none); }
	def visit_imm_b(prefixes: X86_64Prefix.set, name: string, i: byte) { visit(prefixes, name, X86_64AddrMode.imm_b(i)); }
	def visit_r(prefixes: X86_64Prefix.set, name: string, a: X86_64Gpr) { visit(prefixes, name, X86_64AddrMode.r(a)); }
	def visit_r_r(prefixes: X86_64Prefix.set, name: string, a: X86_64Gpr, b: X86_64Gpr) { visit(prefixes, name, X86_64AddrMode.r_r(a, b)); }
	def visit_r_m(prefixes: X86_64Prefix.set, name: string, a: X86_64Gpr, b: X86_64Addr) { visit(prefixes, name, X86_64AddrMode.r_m(a, b)); }
	def visit_m_r(prefixes: X86_64Prefix.set, name: string, a: X86_64Addr, b: X86_64Gpr) { visit(prefixes, name, X86_64AddrMode.m_r(a, b)); }
	def visit_r_b(prefixes: X86_64Prefix.set, name: string, a: X86_64Gpr, i: byte)  { visit(prefixes, name, X86_64AddrMode.r_b(a, i)); }
	def visit_m_b(prefixes: X86_64Prefix.set, name: string, a: X86_64Addr, i: byte)  { visit(prefixes, name, X86_64AddrMode.m_b(a, i)); }
	def visit_r_i(prefixes: X86_64Prefix.set, name: string, a: X86_64Gpr, i: int)  { visit(prefixes, name, X86_64AddrMode.r_i(a, i)); }
	def visit_m_i(prefixes: X86_64Prefix.set, name: string, a: X86_64Addr, i: int)  { visit(prefixes, name, X86_64AddrMode.m_i(a, i)); }
	def visit_r_l(prefixes: X86_64Prefix.set, name: string, a: X86_64Gpr, i: long)  { visit(prefixes, name, X86_64AddrMode.r_l(a, i)); }
	def visit_r_s(prefixes: X86_64Prefix.set, name: string, a: X86_64Gpr, b: X86_64Xmmr) { visit(prefixes, name, X86_64AddrMode.r_s(a, b)); }
	def visit_s_s(prefixes: X86_64Prefix.set, name: string, a: X86_64Xmmr, b: X86_64Xmmr) { visit(prefixes, name, X86_64AddrMode.s_s(a, b)); }
	def visit_s_m(prefixes: X86_64Prefix.set, name: string, a: X86_64Xmmr, b: X86_64Addr) { visit(prefixes, name, X86_64AddrMode.s_m(a, b)); }
	def visit_m_s(prefixes: X86_64Prefix.set, name: string, a: X86_64Addr, b: X86_64Xmmr) { visit(prefixes, name, X86_64AddrMode.m_s(a, b)); }
	def visit_s_r(prefixes: X86_64Prefix.set, name: string, a: X86_64Xmmr, b: X86_64Gpr) { visit(prefixes, name, X86_64AddrMode.s_r(a, b)); }
	// Handle unsupported opcodes.
	def unsupported(msg: string) { }
	// Handle illegal opcodes.
	def illegal(bytes: Range<byte>) { }
}

// Prefixes that can be applied to an instruction.
enum X86_64Prefix {
	REP, REX, REX_B, REX_X, REX_R, REX_W, LOCK, FS_OVERRIDE,
	OPERAND_SIZE_OVERRIDE, ADDRESS_SIZE_OVERRIDE, GROUP1_2
}

// Disassembler for X86-64 instructions.
class X86_64Disassembler(v: X86_64DisVisitor) {
	def r = DataReader.new(null);	// reader used to access data
	def var pos: int;		// current position offset within {r}
	private var prefixes: X86_64Prefix.set;

	// Reset this disassembler to use the given data.
	def reset(data: Range<byte>) -> this {
		r.reset(data, 0, data.length);
	}
	// Returns true if there is more data in the buffer.
	def more() -> bool {
		return r.more();
	}
	// Disassembles a single instruction, returning {false} for an illegal or unknown
	// instruction, or if no instructions remain.
	def disassemble() -> bool {
		// Remember the start of the current instruction.
		pos = r.pos;
		if (r.pos >= r.limit) return false;

		//--------------------------------------------------------------------------------
		// Decode prefixes.
		//--------------------------------------------------------------------------------
		var none: X86_64Prefix.set;
		prefixes = none;
		var group1_prefix = 0;
		var current: byte;
		while (r.ok) {
			current = r.read1();

			if (current == OPERAND_SIZE_OVERRIDE_PREFIX) {  // Group 3 prefix.
				prefixes |= X86_64Prefix.OPERAND_SIZE_OVERRIDE;
			} else if ((current & 0xF0) == 0x40) {  // REX prefix.
				prefixes |= X86_64Prefix.REX;
				if ((current & 0x1) != 0) prefixes |= X86_64Prefix.REX_B;
				if ((current & 0x2) != 0) prefixes |= X86_64Prefix.REX_X;
				if ((current & 0x4) != 0) prefixes |= X86_64Prefix.REX_R;
				if ((current & 0x8) != 0) prefixes |= X86_64Prefix.REX_W;
			} else if ((current & 0xFE) == 0xF2) {  // Group 1 prefix (0xF2 or 0xF3).
				group1_prefix = current;
			} else if (current == LOCK_PREFIX) {
				prefixes |= X86_64Prefix.LOCK;
			} else if (current == VEX3_PREFIX) {
				return unsupported("VEX3 prefix");
			} else if (current == VEX2_PREFIX) {
				return unsupported("VEX2 prefix");
			} else if (current == SEGMENT_FS_OVERRIDE_PREFIX) {
				prefixes |= X86_64Prefix.FS_OVERRIDE;
			} else if (current == ADDRESS_SIZE_OVERRIDE_PREFIX) {
				prefixes |= X86_64Prefix.ADDRESS_SIZE_OVERRIDE;
			} else {  // Not a prefix - an opcode.
			  	break;
			}
		}

		//--------------------------------------------------------------------------------
		// Decode main instructions.
		//--------------------------------------------------------------------------------
		match (current) {
			0x90 => return do_none("nop");
			0x99 => return do_none("cdq");
			0x9C => return do_none("pushfq");
			0xAE => return do_none("scasb");
			0xC3 => return do_none("ret");
			0xCC => return do_imm_b("int", 3);
			0xCD => return do_imm_b("int", r.read1());
			0xCF => return do_none("iret");
		}
		return do_illegal();
	}
	def do_none(name: string) -> bool {
		if (!r.ok) return do_illegal();
		v.visit_none(prefixes, name);
		return true;
	}
	def do_imm_b(name: string, p: byte) -> bool {
		if (!r.ok) return do_illegal();
		v.visit_imm_b(prefixes, name, p);
		return true;
	}
	def do_illegal() -> bool {
		v.illegal(r.data[pos ... r.pos]);
		return false;
	}
	def unsupported(msg: string) -> bool {
		v.unsupported(msg);
		return false;
	}
}

// Prefixes
def ESCAPE_PREFIX = 0x0F;
def SEGMENT_FS_OVERRIDE_PREFIX = 0x64;
def OPERAND_SIZE_OVERRIDE_PREFIX = 0x66;
def ADDRESS_SIZE_OVERRIDE_PREFIX = 0x67;
def VEX3_PREFIX = 0xC4;
def VEX2_PREFIX = 0xC5;
def LOCK_PREFIX = 0xF0;
def REPNE_PREFIX = 0xF2;
def REP_PREFIX = 0xF3;
def REPEQ_PREFIX = REP_PREFIX;

def iovecs = Array<int>.new(4);
def sizebuf = Array<int>.new(1);
def sizes = Array<int>.new(2);

component RiRuntime {
	def init() -> Array<string> {
		wasi_snapshot_preview1.args_sizes_get(Pointer.atElement(sizes, 0), Pointer.atElement(sizes, 1));
		var argvptrs = Array<int>.new(sizes[0]);
		var argbuf = Array<byte>.new(sizes[1]);
		wasi_snapshot_preview1.args_get(Pointer.atContents(argvptrs), Pointer.atContents(argbuf));
		var args = Array<string>.new(sizes[0]);
		for (i < argvptrs.length) {
 			var p = Pointer.NULL + argvptrs[i];
			for (q = p; true; q++) {
				if (q.load<byte>() == 0) {
					var len = q - p;
					var str = args[i] = Array<byte>.new(len);
					for (j < str.length) str[j] = (p + j).load<byte>();
					break;
				}
			}
		}
		return args;
	}
	def exit(code: int) { // TODO: required to make entry stub return nothing
	}
}

def main(args: Array<string>) -> int {
	def sp = " ", ln = "\n";
	for (i = 1; i < args.length; i++) { // TODO: print out arg[0], i.e. .wasm file
		var a = args[i];
		puts(a);
		var after = if(i == (args.length - 1), ln, sp);
		puts(after);
	}
	return 0;
}

def puts(str: string) {
	var r = fs_write(Pointer.atContents(str), str.length);
	if (r != str.length) var x = 1/0; // crash if write fails
}
def iobuf = Array<byte>.new(16);
def retbuf = Array<byte>.new(16);
def fs_write(data: Pointer, len: int) -> int {
	var fd = 1;
	var p = Pointer.atContents(iobuf);
	(p + 0).store<int>(data - Pointer.NULL);
	(p + 4).store<int>(len);
	var sizeptr = Pointer.atContents(retbuf);
	var r = wasi_snapshot_preview1.fd_write(fd, p, 1, sizeptr);
	return if(r == 0, sizeptr.load<int>());
}

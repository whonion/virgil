def T = LibTests.register("DataWriter", _, _);
def X = [
	T("putb", test_putb),
	T("putbb", test_putbb),
	T("putbbb", test_putbbb),
	T("put_b16", test_put_b16),
	T("put_b32", test_put_b32),
	T("put_b64", test_put_b64),
	T("puta", test_puta),
	T("putk", test_putk),
	T("putr", test_putr),
	T("zeroN", test_zeroN),
	T("skipN", test_skipN),
	T("at", test_at),
	T("grow", test_grow),
	T("extract", test_extract),
	T("send1", test_send1),
	T("send2", test_send2),
	T("acquire", test_acquire),
	T("align", test_align),
	T("sleb32", test_sleb32),
	T("uleb32", test_uleb32),
	T("sleb64", test_sleb64),
	T("uleb64", test_uleb64),
	T("skipleb", test_skipleb),
	T("range_32", test_range_32),
	T("range_64", test_range_64),
	T("range_float", test_range_float),
	T("range_double", test_range_double),
	()
];

def BG: Array<byte> = [0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99];
def FG = Arrays.dup(BG);

def assertWrite<T>(t: LibTest, write: (DataWriter, T) -> DataWriter, val: T, bytes: Array<byte>) {
	var w = DataWriter.new();

	write(w, val); // first write
	t.assertk(bytes, w.data);
	var pos = w.pos;

	write(w, val); // second write
	t.assertk(bytes, w.data[pos ...]);
	Arrays.copyInto(BG, FG, 0);
	w.reset(FG, 4, FG.length);

	write(w, val); // third write
	t.assertk(bytes, w.data[4 ...]);
}

def tup2<T, U>(
	f: (DataWriter, T, U) -> DataWriter,
	w: DataWriter,
	v: (T, U))
	-> DataWriter {
	return f(w, v.0, v.1);
}

def tup3<T, U, V>(
	f: (DataWriter, T, U, V) -> DataWriter,
	w: DataWriter,
	v: (T, U, V))
	-> DataWriter {
	return f(w, v.0, v.1, v.2);
}

def test_putb(t: LibTest) {
	def r = assertWrite(t, DataWriter.putb, _, _);
	r(0, [0]);
	r(1, [1]);
	r(88, [88]);
	r(0xfe, [0xfe]);
}

def test_putbb(t: LibTest) {
	def r = assertWrite(t, tup2(DataWriter.putbb, _, _), _, _);
	r((0, 1), [0, 1]);
	r((1, 2), [1, 2]);
	r((88, 99), [88, 99]);
	r((0xfe, 0x77), [0xfe, 0x77]);
}

def test_putbbb(t: LibTest) {
	def r = assertWrite(t, tup3(DataWriter.putbbb, _, _), _, _);
	r((0, 1, 9), [0, 1, 9]);
	r((1, 2, 3), [1, 2, 3]);
	r((88, 99, 122), [88, 99, 122]);
	r((0xfe, 0x77, 0x66), [0xfe, 0x77, 0x66]);
}

def test_put_b16(t: LibTest) {
	def le = assertWrite(t, DataWriter.put_b16, _, _);
	le(0x1122, [0x22, 0x11]);
	le(0xfeef, [0xef, 0xfe]);

	def be = assertWrite(t, DataWriter.put_b16be, _, _);
	be(0x1122, [0x11, 0x22]);
	be(0xfeef, [0xfe, 0xef]);
}

def test_put_b32(t: LibTest) {
	def le = assertWrite(t, DataWriter.put_b32, _, _);
	le(0x11223344, [0x44, 0x33, 0x22, 0x11]);
	le(0xfeefdccd, [0xcd, 0xdc, 0xef, 0xfe]);

	def be = assertWrite(t, DataWriter.put_b32be, _, _);
	be(0x11223344, [0x11, 0x22, 0x33, 0x44]);
	be(0xfeefdccd, [0xfe, 0xef, 0xdc, 0xcd]);
}

def test_put_b64(t: LibTest) {
	def le = assertWrite(t, DataWriter.put_b64, _, _);
	le(0x1122334455667788, [0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11]);
	le(0xfeefdccd99887766, [0x66, 0x77, 0x88, 0x99, 0xcd, 0xdc, 0xef, 0xfe]);

	def be = assertWrite(t, DataWriter.put_b64be, _, _);
	be(0x1122334455667788, [0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88]);
	be(0xfeefdccd99887766, [0xfe, 0xef, 0xdc, 0xcd, 0x99, 0x88, 0x77, 0x66]);
}

def test_puta(t: LibTest) {
	def r = assertWrite(t, DataWriter.puta, _, _);
	r([0, 9, 11], [0, 9, 11]);
	for (a in ["x", "xyz", "nnnnnnn012345678"]) {
		r(a, a);
	}
}

def test_putk(t: LibTest) {
	def r = assertWrite(t, tup3(DataWriter.putk, _, _), _, _);
	var x = "0123456789";
	r((x, 0, 10), ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']);
	r((x, 1, 4), ['1', '2', '3']);
	r((x, 8, 9), ['8']);
}

def test_putr(t: LibTest) {
	def r = assertWrite(t, DataWriter.putr, _, _);
	var x = "ABCDEFGHIJ";
	r((x[0 ... 10]), ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']);
	r((x[1 ... 4]), ['B', 'C', 'D']);
	r((x[8 ... 9]), ['I']);
}

def test_zeroN(t: LibTest) {
	def r = assertWrite(t, DataWriter.zeroN, _, _);
	r(1, [0]);
	r(5, [0, 0, 0, 0, 0]);
}

def test_skipN(t: LibTest) {
	var w = DataWriter.new();
	w.skipN(1);
	t.asserteq(1, w.pos);
	w.skipN(5);
	t.asserteq(6, w.pos);
}

def test_at(t: LibTest) {
	var w = DataWriter.new().grow(5);
	w.at(1);
	t.asserteq(1, w.pos);
	w.at(3);
	t.asserteq(3, w.pos);
	t.asserteq(3, w.end());
	w.at(0);
	t.asserteq(0, w.pos);
	t.asserteq(3, w.end());
	w.atEnd();
	t.asserteq(3, w.pos);
}

def test_grow(t: LibTest) {
	var w = DataWriter.new();
	t.asserteq(0, w.pos);
	w.grow(5);
	t.assert(w.data.length >= 5);
	w.grow(5);
	t.assert(w.data.length >= 5);
	w.grow(10);
	t.assert(w.data.length >= 10);
}

def test_extract(t: LibTest) {
	var w = DataWriter.new();
	w.putb(99);
	t.assert_string([99], w.extract());
	t.asserteq(0, w.pos);
	w.putbbb(88, 77, 66);
	t.assert_string([88, 77, 66], w.extract());
	t.asserteq(0, w.pos);
}

def test_send1(t: LibTest) {
	var w = DataWriter.new();
	w.putb(99);
	var c = Collector<Range<byte>>.new();
	w.send(c.funcv);
	t.asserteq(1, c.count);
	t.assert(t.equalr(c.got, [byte.view(99)]));
}

def test_send2(t: LibTest) {
	var w = DataWriter.new();
	var c = Collector<Range<byte>>.new();
	w.putbbb(77, 66, 55);
	w.send(c.funcv);
	t.asserteq(1, c.count);
	var expected: Array<byte> = [77, 66, 55];
	t.assert(t.equalr(c.got, expected));
}

def assertAcquire(t: LibTest, w: DataWriter, n: int) {
	var prev_pos = w.pos;
	var a = w.acquire(1);
	t.asserteq(1, a.length);
	t.asserteq(1 + prev_pos, w.pos);
}

def test_acquire(t: LibTest) {
	var w = DataWriter.new();
	assertAcquire(t, w, 1);
	assertAcquire(t, w, w.data.length);
	assertAcquire(t, w, w.data.length * 3);
}

def test_align(t: LibTest) {
	var w = DataWriter.new();
	w.putb(1);
	w.align(2);
	t.asserteq(2, w.pos);
	w.align(4);
	t.asserteq(4, w.pos);
	w.align(8);
	t.asserteq(8, w.pos);
	w.at(15);
	w.align(8);
	t.asserteq(16, w.pos);
}

def test_sleb32(t: LibTest) {
	var r = assertWrite(t, DataWriter.put_sleb32, _, _);
	r(0, [0]);
	r(1, [1]);
	r(13, [0x0D]);
	r(-16, [0x70]);
	r(-12, [0x74]);
	r(-89, [0xA7, 0x7F]);
	r(128, [0x80, 0x01]);
	r(49155, [0x83, 0x80, 0x03]);
	r(1023134256, [0b10110000, 0b10010100, 0b11101111, 0b11100111, 0b0011]);
	r(-268435456, [0x80, 0x80, 0x80, 0x80, 0x7f]);

	r(-12345, [0xC7, 0x9F]);
	r(-123456, [0xC0, 0xBB, 0x78]);
	r(-1234567, [0xF9, 0xD2, 0xB4]);
	r(-12345678, [0xB2, 0xBD, 0x8E, 0x7A]);
	r(-123456789, [0xEB, 0xE5, 0x90, 0x45]);
	r(-1234567890, [0xAE, 0xFA, 0xA7, 0xB3, 0x7B]);
}

def test_uleb32(t: LibTest) {
	var r = assertWrite(t, DataWriter.put_uleb32, _, _);
	r(0, [0]);
	r(1, [1]);
	r(13, [0x0D]);
	r(0x70, [0x70]);
	r(0x74, [0x74]);
	r(128, [0x80, 0x01]);
	r(123, [0x7B]);
	r(1234, [0xD2, 0x09]);
	r(12345, [0xB9, 0x60]);
	r(123456, [0xC0, 0xC4, 0x07]);
	r(12345678, [0xCE, 0xC2, 0xF1, 0x05]);
	r(1234567890, [0xD2, 0x85, 0xD8, 0xCC, 0x04]);

	r(49155, [0x83, 0x80, 0x03]);
	r(1023134256, [0b10110000, 0b10010100, 0b11101111, 0b11100111, 0b0011]);
}

def test_sleb64(t: LibTest) {
	var r = assertWrite(t, DataWriter.put_sleb64, _, _);
	r(0, [0]);
	r(3, [3]);
	r(15, [0x0F]);
	r(-16, [0x70]);
	r(-12, [0x74]);
	r(-89, [0xA7, 0x7F]);
	r(128, [0x80, 0x01]);
	r(49155, [0x83, 0x80, 0x03]);
	r(1023134256, [0b10110000, 0b10010100, 0b11101111, 0b11100111, 0b0011]);
	r(-268435456, [0x80, 0x80, 0x80, 0x80, 0x7f]);

	r(-12345, [0xC7, 0x9F]);
	r(-123456, [0xC0, 0xBB, 0x78]);
	r(-1234567, [0xF9, 0xD2, 0xB4]);
	r(-12345678, [0xB2, 0xBD, 0x8E, 0x7A]);
	r(-123456789, [0xEB, 0xE5, 0x90, 0x45]);
	r(-1234567890, [0xAE, 0xFA, 0xA7, 0xB3, 0x7B]);

	r(207509045505, [0x81, 0x82, 0x83, 0x84, 0x85, 0x06]);
	r(30993834623233, [0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x07]);
	r(4534593461993729, [0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x08]);
	r(653052939803345153, [0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x09]);
	r(0x8000000000000000L, [0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f]);
}

def test_uleb64(t: LibTest) {
//TODO	var r = assertWrite(t, DataWriter.put_uleb64, _, _);
//TODO	r(653052939803345153, [0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x09]);
}

def test_skipleb(t: LibTest) {
	var bg: Array<byte> = [0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77];
	var w = DataWriter.new().reset(bg, 0, 0);
	w.at(1);
	w.skip_leb32();
	t.asserteq(6, w.pos);
	w.at(9);

	w.at(1).overwrite_uleb32(1);
	t.assertk([0x11, 0x81, 0x80, 0x80, 0x80, 0, 0x77], w.data);

	w.at(1).overwrite_uleb32(1234567890);
	t.assertk([0x11, 0xD2, 0x85, 0xD8, 0xCC, 0x04, 0x77], w.data);

	t.asserteq(9, w.atEnd().pos);
}


def test_range_32(t: LibTest) {
	var data = Array<byte>.new(5);

	DataWriters.write_range_i8(data, 0x88);
	t.assertk([0x88, 0, 0, 0, 0], data);

	DataWriters.write_range_u8(data[2 ...], 0x77);
	t.assertk([0x88, 0, 0x77, 0, 0], data);

	DataWriters.write_range_i16(data[3 ...], 0x3344);
	t.assertk([0x88, 0, 0x77, 0x44, 0x33], data);

	DataWriters.write_range_u16(data[2 ...], 0xAABB);
	t.assertk([0x88, 0, 0xBB, 0xAA, 0x33], data);

	DataWriters.write_range_i32(data, 0xFFEEDDCC);
	t.assertk([0xCC, 0xDD, 0xEE, 0xFF, 0x33], data);

	DataWriters.write_range_u32(data[1 ...], 0x11223344);
	t.assertk([0xCC, 0x44, 0x33, 0x22, 0x11], data);
}

def test_range_64(t: LibTest) {
	var data = Array<byte>.new(9);

	DataWriters.write_range_i64(data, 0x99887766_55443322);
	t.assertk([0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0x00], data);

	DataWriters.write_range_u64(data[1 ...], 0x11223344_55667788);
	t.assertk([0x22, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11], data);
}

def test_range_float(t: LibTest) {
	var data = Array<byte>.new(5);

	DataWriters.write_range_float(data, float.view(0x55443322));
	t.assertk([0x22, 0x33, 0x44, 0x55, 0x00], data);
}

def test_range_double(t: LibTest) {
	var data = Array<byte>.new(9);

	DataWriters.write_range_double(data[1 ...], double.view(0x11223344_55667788));
	t.assertk([0x00, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11], data);
}

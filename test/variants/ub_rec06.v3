//@execute 0=0; 1=5; 2=10; 3=120

type T<E> #unboxed {
	case Leaf(x: E);
	case One(a: T<E>.Leaf, b: T<E>.Leaf);
	case Two(a: T<E>.One, b: T<E>.One);
}

def main(a: int) -> int {
	var leaf: T<int>.Leaf;
	var one: T<int>.One;
	var two: T<int>.Two;
	var nop = int.!<int>;

	if (a == 0) return count(leaf, nop);
	if (a == 1) return count(T<int>.Leaf(5), nop);
	if (a == 2) return count(one, nop);
	if (a == 3) return count(two, nop);
	return 49;
}

def count<E>(t: T<E>, num: E -> int) -> int {
	match (t) {
		Leaf(x) => return num(x);
		One(a, b) => return 10 + count(a, num) + count(b, num);
		Two(a, b) => return 100 + count(a, num) + count(b, num);
	}
}

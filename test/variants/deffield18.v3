//@execute 0=0; 1=7; 2=10; 3=120; 4=128

type T<E> {
	case Leaf(x: E);
	case One(a: (T<E>.Leaf, T<E>.Leaf));
	case Two(a: T<E>.One, b: T<E>.One);
}

type Vec(x: int, y: int, z: int);

class C {
	var leaf: T<Vec>.Leaf;
	var one: T<Vec>.One;
	var two: T<Vec>.Two;
}

def main(a: int) -> int {
	var c = C.new();

	if (a == 0) return count(c.leaf, nop);
	if (a == 1) return count(T<Vec>.Leaf(Vec(1, 2, 4)), nop);
	if (a == 2) return count(c.one, nop);
	if (a == 3) return count(c.two, nop);
	if (a == 4) return count(T<Vec>.Two(T<Vec>.One(T<Vec>.Leaf(Vec(3, 1, 4)), c.leaf), c.one), nop);
	return 49;
}

def count<E>(t: T<E>, num: E -> int) -> int {
	match (t) {
		Leaf(x) => return num(x);
		One(a) => return 10 + count(a.0, num) + count(a.1, num);
		Two(a, b) => return 100 + count(a, num) + count(b, num);
	}
}

def nop(v: Vec) -> int {
	return v.x + v.y + v.z;
}
def STDIN = 0;
def STDOUT = 1;
def STDERR = 2;

def buf = Array<byte>.new(4096);
def str = StringOutputter.new();

def main() -> int {
	var argc = wali.cl_get_argc();
	for (i = 1u; i < argc; i++) {
		var arg_len = wali.cl_get_argv_len(i);
		if (arg_len > buf.length) arg_len = u32.!(buf.length - 1);
		wali.cl_copy_argv(Pointer.atContents(buf), i);
		buf[arg_len] = 0;

		var stat = Ref<wali_stat>.at(buf, int.!(arg_len + 1));

		var r = wali.SYS_stat(Pointer.atContents(buf), Pointer.atRef(stat));
		if (r < 0) continue;

		printStat(Arrays.range(buf, 0, int.!(arg_len)), stat);
	}
	return 0;
}

def printStat(name: string, stat: Ref<wali_stat>) {
	str.reset()
	   .put1("stat for: %s", name).ln()
	   .put1("  st_dev:     %d", stat.st_dev).ln()
	   .put1("  st_ino:     %d", stat.st_ino).ln()
	   .put1("  st_nlink:   %d", stat.st_nlink).ln()

	   .put1("  st_mode:    %d", stat.st_mode).ln()
	   .put1("  st_uid:     %d", stat.st_uid).ln()
	   .put1("  st_gid:     %d", stat.st_gid).ln()

	   .put1("  st_rdev:    %d", stat.st_rdev).ln()
	   .put1("  st_size:    %d", stat.st_size).ln()
	   .put1("  st_blksize: %d", stat.st_blksize).ln()
	   .put1("  st_blocks:  %d", stat.st_blocks).ln()

//	   .put1("  st_atim:        wali_timespec;", stat.st_atim).ln()
//	   .put1("  st_mtim:        wali_timespec;", stat.st_mtim).ln()
//	   .put1("  st_ctim:        wali_timespec;", stat.st_ctim).ln();
	   .reset();
}

def stdout = System.write(1, _);

class StringOutputter extends StringBuilder {
	def ln() -> this {
		putc('\n');
		send(stdout);
		reset();
	}
}
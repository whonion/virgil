//@execute 0=42

var globalScans = 0;

// An object that has a hidden pointer to itself.
class C(data: int) {
	var pointer: Pointer;
	var scans = 0;

	new() {
		pointer = Pointer.atObject(this);	// hidden raw pointer to self
		RiGc.registerScanner(this, C.scan);	// call scan() upon GC
	}
	def scan() {
		RiGc.scanRoot(Pointer.atField(this.pointer));		// scan the root
		if (pointer != Pointer.atObject(this)) { var x = 1/0; }	// check the updated pointer
		scans++;						// count the number of scans
		globalScans++;
	}
}

def test1(v: int) -> int {
	globalScans = 0;
	// Allocate some objects that have custom scan routines.
	def GC_COUNT = 5;
	var objs = [C.new(v - 11), C.new(53 - v)];

	// Run some GCs
	for (i < GC_COUNT) {
		RiGc.forceGC();
	}
	// Check that all the scans were called.
	if (globalScans != GC_COUNT * objs.length) {
		return -21;
	}
	var sum = 0;
	for (o in objs) {
		if (o.scans != GC_COUNT) return -20;
		sum += o.data;
	}
	// Return the sum of the data fields.
	return sum;
}

def test2(v: int) -> int {
	globalScans = 0;
	// Allocate some objects that have custom scan routines.
	def GC_COUNT = 5;
	var objs = [C.new(-55), C.new(42)];

	// Run some GCs
	for (i < GC_COUNT) {
		RiGc.forceGC();
	}
	// Null-out the first entry and run some more.
	objs[0] = null;
	for (i < GC_COUNT) {
		RiGc.forceGC();
	}
	// Check that all the scans were called.
	if (globalScans != GC_COUNT * 3) {
		return -22;
	}
	// Check that all the scans were called.
	var sum = 0;
	for (o in objs) {
		if (o == null) continue;
		if (o.scans != 2 * GC_COUNT) return -24;
		sum += o.data;
	}
	// Return the sum of the data fields.
	return sum;
}

def main() -> int {
	var tests = [test1, test2];
	for (i < tests.length) {
		System.puts("##+test");
		System.puti(i + 1);
		System.ln();
		var r = tests[i](99 + i);
		if (r == 42) {
			System.puts("##-ok\n");
		} else {
			System.puts("##-fail: ");
			System.puti(r);
			System.ln();
		}
	}
	return 42;
}

// Copyright 2024 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def data = DataWriter.new();

def T = UnitTests.registerT("disass:", _, X86_64DisassemblerTester.new, _);
def X_ = [
	T("intK", test_intK),
	T("cdq", test_none(_, "cdq", X86_64Assembler.cdq)),
	T("iret", test_none(_, "iret", X86_64Assembler.iret)),
	T("pushfq", test_none(_, "pushfq", X86_64Assembler.pushfq)),
	T("nop", test_none(_, "nop", X86_64Assembler.nop1)),
	T("ret", test_none(_, "ret", X86_64Assembler.ret)),
	T("scasb", test_none(_, "scasb", X86_64Assembler.scasb)),

	()
];

enum GPR_WIDTH {
	R8, R16, R32, R64
}

def REX_PREFIXES = X86_64Prefix.REX | X86_64Prefix.REX_B | X86_64Prefix.REX_X | X86_64Prefix.REX_R | X86_64Prefix.REX_W;

class X86_64DisassemblerTester(t: Tester) extends X86_64DisVisitor {
	def asm = X86_64Assemblers.create64(data);
	var dis: X86_64Disassembler;
	var gprWidth: GPR_WIDTH = GPR_WIDTH.R64;
	var pos: int;

	var expected_name: string;
	var expected_mode: X86_64AddrMode;

	new() {
		dis = X86_64Disassembler.new(this);
	}

	def assert0<R>(name: string, mode: X86_64AddrMode, f: X86_64Assembler -> R) {
		expected_name = name;
		expected_mode = mode;
		pos = asm.pos();
		f(asm);
		dis.reset(asm.w.data[pos ... asm.pos()]);
		var ok = dis.disassemble();
		if (!ok) t.fail("disassembler reported an error");
	}
	def assert1<P, R>(name: string, mode: X86_64AddrMode, f: (X86_64Assembler, P) -> R, p: P) {
		expected_name = name;
		expected_mode = mode;
		pos = asm.pos();
		f(asm, p);
		dis.reset(asm.w.data[pos ... asm.pos()]);
		var ok = dis.disassemble();
		if (!ok) t.fail("disassembler reported an error");
	}

	def check_name(got: string) -> this {
		if (Strings.equal(expected_name, got)) return;
		var buf = render_expected();
		t.fail(buf.put1("got instruction %s", got).toString());
	}
	def check_mode(got: X86_64AddrMode) {
		if (got == expected_mode) return;
		var buf = render_expected();
		t.fail(buf.put1("got operands %q", got.render).toString());
	}
	def render_expected() -> StringBuilder {
		var buf = StringBuilder.new();
		buf.puts("expected ");
		var bytes = asm.w.data[pos ... asm.pos()];
		for (b in bytes) buf.putx_8(b).sp();
		buf.put2(" => %s %q, ", expected_name, expected_mode.render);
		return buf;
	}

	def visit(prefixes: X86_64Prefix.set, name: string, got: X86_64AddrMode) {
		check_name(name);
		check_mode(got);
	}
}

def test_intK(t: X86_64DisassemblerTester) {
	var dis = X86_64Disassembler.new(t);
	for (i < 256) {
		if (!t.t.ok) break;
		var b = byte.view(i);
		t.assert1("int", X86_64AddrMode.imm_b(b), X86_64Assembler.intK, (b));
	}
}
def test_none<R>(t: X86_64DisassemblerTester, name: string, func: X86_64Assembler -> R) {
	t.assert0(name, X86_64AddrMode.none, func);
}


def main(args: Array<string>) -> int {
	return UnitTests.run(args);
}

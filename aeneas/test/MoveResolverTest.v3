def X_ = UnitTests.register("move:graph4", test_graph4);

var input: Array<int>;
def test_graph4(t: Tester) {
	// check all possible move graphs with 4 nodes
	for (i = -1; i < 4; i++) {
		for (j = -1; j < 4; j++) {
			for (k = -1; k < 4; k++) {
				for (l = -1; l < 4; l++) {
					setupInput(5);
					var m = MoveResolver.new(null);
					m.addMove(i, 1);
					m.addMove(j, 2);
					m.addMove(k, 3);
					m.addMove(l, 4);

					m.genMoves(alloc, move);

					check(t, 1, i);
					check(t, 2, j);
					check(t, 3, k);
					check(t, 4, l);
				}
			}
		}
	}
}

def check(t: Tester, loc: int, val: int) {
	if (input[loc] != val) t.fail2("expected %d at %d", val, loc);
}

def setupInput(len: int) {
	input = Array.new(len);
	for (i = 0; i < len; i++) input[i] = i;
}

def move(src: int, dst: int) {
	var val = if(src >= 0, input[src], src);
	if (UnitTests.trace) System.puts(Strings.format3("%d(=%d) -> %d\n", src, val, dst));
	input[dst] = val;
}

def alloc(loc: int) -> int {
	return 0; // always use register 0 for a temporary
}

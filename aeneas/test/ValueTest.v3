def T = UnitTests.registerT("val:", _, ValueTester.new, _);
def X_ = void(
	T("IntBox", testIntBox),
	T("LongBox", testLongBox),
	T("BoolBox", testBoolBox),
	T("BoxVal", testBoxVal),
	()
);

def BOTTOM = Values.BOTTOM;
def INT_ONE = Int.box(1);
def INT_TWO = Int.box(2);
def INT_MIN = Int.box(int.min);
def LONG_ONE = Long.box(1);
def LONG_MAX = Long.box(long.max);
def BOOL_TRUE = Bool.box(true);

def box1(v: Val) -> Val {
	return BoxVal.new(null, [v]);
}

def box2(a: Val) -> Val {
	return BoxVal.new(null, [a, a]);
}

private class ValueTester(t: Tester) {
	def assertEq(a: Val, b: Val) {
		if (!Values.equal(a, b) || !Values.equal(b, a)) {
			var buf = StringBuilder.new();
			buf.puts("expected ");
			V3.renderResult(a, null, buf);
			buf.puts(" == ");
			V3.renderResult(b, null, buf);
			return t.fail(buf.toString());
		}
		var ha = Values.hash(a), hb = Values.hash(b);
		if (ha != hb) {
			var buf = StringBuilder.new();
			buf.puts("expected hash ");
			V3.renderResult(a, null, buf);
			buf.puts(" == ");
			V3.renderResult(b, null, buf);
			buf.put2(" (%d != %d)", ha, hb);
			return t.fail(buf.toString());
		}
	}
	def assertEqSet(a: Range<Val>) {
		for (i in a) for (j in a) assertEq(i, j);
	}
	def assertNeSet(a: Range<Val>) {
		for (i < a.length) for (j < a.length) {
			if (i == j) assertEq(a[i], a[j]);
			else assertNe(a[i], a[j]);
		}
	}
	def assertNe(a: Val, b: Val) {
		if (Values.equal(a, b) || Values.equal(b, a)) {
			var buf = StringBuilder.new();
			buf.puts("expected ");
			V3.renderResult(a, null, buf);
			buf.puts(" != ");
			V3.renderResult(b, null, buf);
			return t.fail(buf.toString());
		}
	}
}

def testIntBox(t: ValueTester) {
	def box = Int.box;

	t.assertEqSet([BOTTOM, Int.ZERO, box(0), box(0)]);
	t.assertEqSet([Int.ONE, box(1), box(1)]);
	t.assertEqSet([Int.TWO, box(2), box(2)]);
	t.assertEqSet([Int.FOUR, box(4), box(4)]);
	t.assertEqSet([Int.MINUS_1, box(-1), box(-1)]);

	t.assertNeSet([Int.ZERO, Int.ONE, Int.TWO, Int.FOUR, Int.MINUS_1]);

	for (i in [99, -87, 89734, 1239, int.min, int.max]) {
		t.assertEqSet([box(i), box(i)]);
	}
}

def testLongBox(t: ValueTester) {
	def box: long -> Val = Long.box;

	t.assertEqSet([BOTTOM, box(0), box(0)]);

	var longs: Array<long> = [97, -88, 89733, 12398, long.min, long.max];
	for (i in longs) t.assertEqSet([box(i), box(i)]);

	var vals = Arrays.map(longs, box);
	t.assertNeSet(vals);
}

def testBoolBox(t: ValueTester) {
	var T = Bool.TRUE, F = Bool.FALSE;
	def box = Bool.box;
	t.assertEq(T, T);
	t.assertEq(F, F);

	t.assertEq(box(true), T);
	t.assertEq(box(false), F);

	t.assertNe(T, F);

	t.assertNe(T, box(false));
	t.assertNe(F, box(true));

	t.assertEqSet([BOTTOM, Bool.FALSE, box(false), box(false)]);
}

def testBoxVal(t: ValueTester) {
	var box = BoxVal.new(null, _);

	t.assertEqSet([box([]), box([])]);

	var vals: Array<Val> = [BOTTOM, INT_ONE, INT_MIN, BOOL_TRUE, LONG_MAX];
	for (v in vals) {
		t.assertEqSet([box1(v), box1(v)]);
		t.assertEqSet([box2(v), box2(v)]);
	}

	t.assertNeSet(Arrays.map(vals, box1));
	t.assertNeSet(Arrays.map(vals, box2));

	var zeroes = [BOTTOM, Int.ZERO, Int.box(0), Long.box(0), Bool.FALSE, Bool.box(false)];
	for (v in zeroes) {
		t.assertEqSet([null, box1(v), box2(v)]);
	}
	// TODO: more complex tests with records, closures, etc
}

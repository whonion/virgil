def T = UnitTests.registerT("type:", _, TypeTester.new, _);
def X_ = void( // XXX: more internal tests for Type
	T("int", test_int), 	
	T("named", test_named),
	()
);

private class TypeTester(t: Tester) {
	def buf = StringBuilder.new();

	def assertString(expected: string, got: string) {
		if (!Arrays.equal(expected, got)) t.fail2("expected \"%s\", got \"%s\"", expected, got);
	}
	def assertBuffer(expected: string, buf: StringBuilder) {
		var ok = buf.length == expected.length;
		if (ok) {
			for (i < expected.length) {
				if (buf.buf[i] != expected[i]) {
					ok = false;
					break;
				}
			}
		}
		if (!ok) t.fail2("expected \"%s\", got \"%s\"", expected, buf.toString());
	}
	def assertRender(expected: string, render: StringBuilder -> StringBuilder) {
		assertBuffer(expected, render(buf.reset()));
	}
}

def test_int(t: TypeTester) {
	t.assertRender("int", Int.TYPE.render);
	var f = Function.newType(Int.TYPE, Int.TYPE);
	t.assertRender("int -> int", f.render);
	t.assertRender("(int -> int) -> int", Function.newType(f, Int.TYPE).render);
	t.assertRender("int -> int -> int", Function.newType(Int.TYPE, f).render);
}

def test_named(t: TypeTester) {
	var ir = NamedTypeRef.new(null, Token.new("f", "int", 0, 0), null);
	t.assertRender("int", ir.render);
	var f = FuncTypeRef.new(ir, ir);
	t.assertRender("int -> int", f.render);
	t.assertRender("(int -> int) -> int", FuncTypeRef.new(f, ir).render);
	t.assertRender("int -> int -> int", FuncTypeRef.new(ir, f).render);
}
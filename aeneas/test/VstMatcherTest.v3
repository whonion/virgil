def T = UnitTests.registerT("vst:", _, VstMatcherTester.new, _);
def X_ = void(
	T("Question", testQuestion),
	T("String", testString),
	T("Star", testStar),
	T("Prefix", testPrefix),
	T("Suffix", testSuffix),
	T("PrefixSuffix", testPrefixSuffix),
	T("Mixed", testMixed),
	T("Multiple1", testMultiple1),
	T("Multiple2", testMultiple2),
	()
);

def empty = "";
def lower = "abcdefghijklmnopqrstuvwxyz";
def upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
def digits = "0123456789";
def chars = "`~!@#$%^&()-_=+[{]}\\|;:\'\",<.>/";

def globMatchers(pat: string) -> Array<string -> bool> {
	return [VstMatchers.parseGlob(pat), GlobMatcher.new(pat).matches];
}
def vstMatcher(pat: string) -> Array<string -> bool> {
	return [testMemberMatch(_, VstMatchers.parse(pat))];
}
def testMemberMatch(str: string, m: VstMatcher) -> bool {
	match (m) {
		None => return false;
		Some(patterns) => {
			for (l = patterns; l != null; l = l.tail) {
				if (l.head.member(str)) return true;
			}
			return false;
		}
		All => return true;
	}
}

class VstMatcherTester(t: Tester) {
	def assert_match(fa: Array<string -> bool>, input: string) {
		for (f in fa) {
			if (!f(input)) t.fail1("should match \"%s\"", input);
		}
	}
	def assert_fail(fa: Array<string -> bool>, input: string) {
		for (f in fa) {
			if (f(input)) t.fail1("should not match \"%s\"", input);
		}
	}
}

def testQuestion(t: VstMatcherTester) {
	var strings = [
		empty, "THEre", "was", lower, upper, digits, chars
	];
	for (x in strings) {
		for (i < x.length) {
			var pat = Arrays.dup(x);
			pat[i] = '?';
			t.assert_match(globMatchers(pat), x);
		}
	}
}

def testString(t: VstMatcherTester) {
	var strings = [
		empty, "ab", "abc", lower, upper, digits, chars
	];
	for (x in strings) {
		for (y in strings) {
			var check = if(Arrays.equal(x, y), t.assert_match, t.assert_fail);
			check(globMatchers(x), y);
			check(globMatchers(y), x);
		}
	}
}

def testStar(t: VstMatcherTester) {
	for (pat in ["*", "**", "***"]) {
		var Y = t.assert_match(globMatchers(pat), _);
		Y("");
		Y("*");
		Y("?");
		Y("a");
		Y("ab");
		Y("abcdef");
		Y("abcdef*");
		Y("*jakdji&^!*@#$&^");
		Y("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
		Y("abcdefghijklmnopqrstuvwxyz");
		Y("0123456789");
		Y("`~!@#$%^&*()-_=+[{]}\\|;:\'\",<.>/?");
	}
}

def testPrefix(t: VstMatcherTester) {
	var pat = "Pre*", fa = globMatchers(pat), Y = t.assert_match(fa, _), N = t.assert_fail(fa, _);
	Y("Pre");
	Y("Pref");
	Y("Prefi");
	Y("Prefix");
	Y("Pre.");
	Y("Pre?");
	Y("Pre*");

	N("Pr");
	N("Prf");
	N("Prfi");
	N("Prfix");
	N("Pe");
	N("Pe?");
	N("re");

	N("xPre");
	N("xPref");
	N("xPrefi");
	N("xPrefix");
	N("xPre.");
	N("xPre?");
	N("xPre*");
}

def testSuffix(t: VstMatcherTester) {
	var pat = "*Suffix", fa = globMatchers(pat), Y = t.assert_match(fa, _), N = t.assert_fail(fa, _);
	Y("Suffix");
	Y("ASuffix");
	Y(".Suffix");
	Y("NoSuffix");
	Y("TheSuffix");
	Y("xxxSuffix");

	N("uffix");
	N("ASffix");
	N(".Sufix");
	N("NoSufix");
	N("TheSuffx");
	N("xxxSuffi");
}

def testPrefixSuffix(t: VstMatcherTester) {
	var pat = "Pre*Suffix", fa = globMatchers(pat), Y = t.assert_match(fa, _), N = t.assert_fail(fa, _);
	Y("PreSuffix");
	Y("Pre.Suffix");
	Y("PreASuffix");
	Y("PreBSuffix");
	Y("Pre*&#$Suffix");

	N("PrSuffix");
	N("PeASuffix");
	N("PreSffix");
	N("PreNoSufix");
	N("Preuffix");
	N("Prefix");

	N("PreSuffi");
	N("ASuffix");
	N(".Suffix");
	N("NoSuffix");
	N("TheSuffix");
	N("xxxSuffix");

	N("uffix");
	N("ASffix");
	N(".Sufix");
	N("NoSufix");
	N("TheSuffx");
	N("xxxSuffi");
}

def testMixed(t: VstMatcherTester) {
	var pat = "P?e*Suff?x", fa = globMatchers(pat), Y = t.assert_match(fa, _), N = t.assert_fail(fa, _);
	Y("PreSuffix");
	Y("PteSuffix");
	Y("PreSuffax");
	Y("PreSuffTx");
	Y("PreAASuffix");
	Y("P.e..Suff.x");

	N("P.e..Suff.");
	N("PrtSuffix");
	N("PreSuftix");
	N("PreSuffixx");
	N("xPreSuffix");
}

def testMultiple1(t: VstMatcherTester) {
	def pat = "A*B,X*,C", fa = vstMatcher(pat), Y = t.assert_match(fa, _), N = t.assert_fail(fa, _);

	Y("AB");
	Y("AxxB");
	Y("A*B");
	Y("X");
	Y("XY");
	Y("X.Y");
	Y("X_____Y");
	Y("C");

	N("");
	N(".A_");
	N("**");
	N("aA");
	N("aAB");
	N("AB,XY");
	N("A.,X.Y");
	N("Ax,XxY");
	N("A*B,X*,C");
	N("AB,X,C");
	N(".XY");
	N("CC");
	N("+C");
}

def testMultiple2(t: VstMatcherTester) {
	for (pat in ["*", "*,A", "A,*", ".,*,."]) {
		def fa = vstMatcher(pat), Y = t.assert_match(fa, _), N = t.assert_fail(fa, _);

		Y("A");
		Y("AB");
		Y("A*");
		Y("XY");
		Y("X.Y");
		Y("X_____Y");
		Y("*");
	}
}

def T = UnitTests.registerT("buffer:", _, BufferTester.new, _);
def X_ = void(
	T("all", test_all),
	()
);

class BufferTester(t: Tester) {
	var buf: Buffer;
	var data: Array<byte>;

	def setSize(size: int) -> this {
		buf = Buffer.new(size, flush);
	}
	def flush(a: Array<byte>, offset: int, length: int) {
		data = Arrays.range(a, offset, offset + length);
	}
	def test(v: DataWriter, expect: string) {
		data = null;
		buf.flush();
		if (data == null) t.fail("no output");
		if (data.length != expect.length / 2) error(data.length, expect);
		for (i = 0; i < data.length; i = i + 1) {
			var d = data[i];
			var hv = Char.hexValue(expect[i * 2]);
			var lv = Char.hexValue(expect[i * 2 + 1]);
			if ((d & 0xf) != lv) error(i, expect);
			if ((d >> 4) != hv) error(i, expect);
		}
	}
	def error(pos: int, expect: string) {
		var dl = data.length, el = expect.length;
		var b = StringBuilder.new().puts("buffer has ");
		var j = 0;
		while (j < pos && j < dl) {
			b.putx_8(data[j]); // append correct data
			j = j + 1;
		}
		b.putc('[');
		while (j < dl) {
			b.putx_8(data[j]); // append error data
			j = j + 1;
		}
		b.puts("] != ");

		j = 0;
		while (j < pos*2 && j < el) {
			b.putc(expect[j]);     // append correct data
			b.putc(expect[j + 1]); // append correct data
			j = j + 2;
		}
		b.putc('[');
		while (j < el) {
			b.putc(expect[j]);     // append correct data
			b.putc(expect[j + 1]); // append correct data
			j = j + 2;
		}
		b.putc(']');

		t.fail(b.toString());
	}
}


def test_all(t: BufferTester) {
	testInts(t.setSize(1));
	testInts(t.setSize(2));
	testInts(t.setSize(3));
	testInts(t.setSize(4));
	testInts(t.setSize(5));
}

def testInts(t: BufferTester) {
	def u = t.buf.getWriter();
	def x = t.test;

	x(u.putb(0),    "00");
	x(u.putb(0xFF), "FF");
	x(u.putb(0xAA), "AA");
	x(u.putb(0x09), "09");
	x(u.putb(0x13), "13");

	x(u.put_b16(0x1122), "2211");
	x(u.put_b16be(0x1122), "1122");

	x(u.put_b32(0x1322), "22130000");
	x(u.put_b32be(0x1132), "00001132");

	x(u.put_b32(0x11223344), "44332211");
	x(u.put_b32be(0x11223344), "11223344");

	x(u.puta("\x00\x01\x02\x03\x04\x05\xff\xCC"), "000102030405FFCC");
}

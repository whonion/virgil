// Copyright 2024 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("arm:", _, ArmTester.new, _);
def X_ = void(
	T("shifter", test_shifter),
	T("offset", test_offset),
	T("pc", test_pc),
	T("add", test_add),
	T("and", test_and),
	T("eor", test_eor),
	T("orr", test_orr),
	T("cmp", test_cmp),

	T("ldr", test_ldr),
	T("ldrsb", test_ldrsb),
	T("ldrsh", test_ldrsh),
	T("ldrh", test_ldrh),
	T("str", test_str),
	T("strh", test_strh),

	T("mov", test_mov),
	T("mul", test_mul),

	T("3addr", test_3addr),
	T("cond", test_cond),
	()
);

def data = Array<byte>.new(128);
def w = DataWriter.new();
def asm = ArmAssembler.new(w);

def BIT25 = 1u << 25;

class ArmTester(t: Tester) {
	def check(expected: u32, v: void) {
		asm.w.at(0);
		var d = asm.w.data;
		t.assert_eq(expected,
			(u32.!(d[3]) << 24) |
			(u32.!(d[2]) << 16) |
			(u32.!(d[1]) << 8) |
			(u32.!(d[0]) << 0));
	}
}

def R0 = ArmReg.R0;
def R1 = ArmReg.R1;
def R2 = ArmReg.R2;
def R3 = ArmReg.R3;
def R4 = ArmReg.R4;
def R5 = ArmReg.R5;
def R6 = ArmReg.R6;
def R7 = ArmReg.R7;
def R8 = ArmReg.R8;
def R9 = ArmReg.R9;
def R10 = ArmReg.R10;
def R11 = ArmReg.R11;
def R12 = ArmReg.R12;
def R13 = ArmReg.R13;
def R14 = ArmReg.R14;
def R15 = ArmReg.R15;

def SL = R10;
def IP = R15;
def PC = R15;
def FP = R11;
def SP = R13;
def LR = R14;

def ALL_REGS = [
	ArmReg.R0,
	ArmReg.R1,
	ArmReg.R2,
	ArmReg.R3,
	ArmReg.R4,
	ArmReg.R5,
	ArmReg.R6,
	ArmReg.R7,
	ArmReg.R8,
	ArmReg.R9,
	ArmReg.R10,
	ArmReg.R11,
	ArmReg.R12,
	ArmReg.R13,
	ArmReg.R14,
	ArmReg.R15
];

def test_shifter(t: ArmTester) {
	def T = test_shifter_output(t.t, _, _);
	// Reg addressing mode
	for (r in ALL_REGS) T(r.tag, ArmOperand.Reg(r));
	// Imm8 + ROR addressing mode
	for (ror: u32 < 16) {
		for (i: u32 < 256) T(BIT25 | (ror << 8) | i, ArmOperand.Imm8(byte.!(i), u4.!(ror)));
	}
	// Reg shifted by immediate addressing mode
	for (shift in [(ArmOperand.RegShlImm, 0u),
			(ArmOperand.RegShrImm, 1u),
			(ArmOperand.RegSarImm, 2u),
			(ArmOperand.RegRorImm, 3u)]) {
		for (r in ALL_REGS) {
			for (sh: u32 < 32) {
				var op = shift.0(r, u5.!(sh));
				T((sh << 7) | (shift.1 << 5) | r.tag, op);
			}
		}
	}
	// Reg shifted by register addressing mode
	for (shift in [(ArmOperand.RegShlReg, 0u),
			(ArmOperand.RegShrReg, 1u),
			(ArmOperand.RegSarReg, 2u),
			(ArmOperand.RegRorReg, 3u)]) {
		for (r in ALL_REGS) {
			for (rs in ALL_REGS) {
				var op = shift.0(r, rs);
				T((u32.!(rs.tag) << 7) | (shift.1 << 5) | 0x10u | r.tag, op);
			}
		}
	}
	// TODO: Reg rotate extended addresing mode
}

def test_offset(t: ArmTester) {
	// TODO: check encoding of load/store offsets
}

def test_shifter_output(t: Tester, expected: u32, op: ArmOperand) {
	var bits = asm.shifter(op);
	t.assert_eq(expected, bits);
}

def test_add(t: ArmTester) {
	asm.w.at(0);
	def T = t.check;
	def ADD = asm.add;
	def OP = ArmOperand.Reg;

	T(0xE0810002u, ADD(R0, R1, OP(R2)));
	T(0xE0810003u, ADD(R0, R1, OP(R3)));
	T(0xE0810004u, ADD(R0, R1, OP(R4)));
	T(0xE0810005u, ADD(R0, R1, OP(R5)));
	T(0xE081000Bu, ADD(R0, R1, OP(FP)));
	T(0xE081000Eu, ADD(R0, R1, OP(LR)));
	T(0xE081000Fu, ADD(R0, R1, OP(PC)));
	T(0xE0820001u, ADD(R0, R2, OP(R1)));
	T(0xE0830001u, ADD(R0, R3, OP(R1)));
	T(0xE0840001u, ADD(R0, R4, OP(R1)));
	T(0xE0850001u, ADD(R0, R5, OP(R1)));
	T(0xE08B0001u, ADD(R0, FP, OP(R1)));
	T(0xE08E0001u, ADD(R0, LR, OP(R1)));
	T(0xE08F0001u, ADD(R0, PC, OP(R1)));
	T(0xE0813002u, ADD(R3, R1, OP(R2)));
	T(0xE0813003u, ADD(R3, R1, OP(R3)));
	T(0xE0813004u, ADD(R3, R1, OP(R4)));
	T(0xE0813005u, ADD(R3, R1, OP(R5)));
	T(0xE081300Bu, ADD(R3, R1, OP(FP)));
	T(0xE081300Eu, ADD(R3, R1, OP(LR)));
	T(0xE081300Fu, ADD(R3, R1, OP(PC)));
	T(0xE0827001u, ADD(R7, R2, OP(R1)));
	T(0xE0837001u, ADD(R7, R3, OP(R1)));
	T(0xE0847001u, ADD(R7, R4, OP(R1)));
	T(0xE0857001u, ADD(R7, R5, OP(R1)));
	T(0xE08B7001u, ADD(R7, FP, OP(R1)));
	T(0xE08E7001u, ADD(R7, LR, OP(R1)));
	T(0xE08F7001u, ADD(R7, PC, OP(R1)));

	def ADDS = asm.adds;

	T(0xE0910002u, ADDS(R0, R1, OP(R2)));
	T(0xE0912003u, ADDS(R2, R1, OP(R3)));
	T(0xE0914004u, ADDS(R4, R1, OP(R4)));
	T(0xE0916005u, ADDS(R6, R1, OP(R5)));
	T(0xE091800Bu, ADDS(R8, R1, OP(FP)));
	T(0xE091A00Eu, ADDS(SL, R1, OP(LR)));
	T(0xE092E001u, ADDS(LR, R2, OP(R1)));
	T(0xE0931001u, ADDS(R1, R3, OP(R1)));
	T(0xE0943001u, ADDS(R3, R4, OP(R1)));
	T(0xE0955001u, ADDS(R5, R5, OP(R1)));
	T(0xE09B7001u, ADDS(R7, FP, OP(R1)));
	T(0xE09E9001u, ADDS(R9, LR, OP(R1)));
	T(0xE09FB001u, ADDS(FP, PC, OP(R1)));
	T(0xE091D002u, ADDS(SP, R1, OP(R2)));
	T(0xE091E003u, ADDS(LR, R1, OP(R3)));
	T(0xE0910004u, ADDS(R0, R1, OP(R4)));
	T(0xE0911005u, ADDS(R1, R1, OP(R5)));
	T(0xE091200Bu, ADDS(R2, R1, OP(FP)));
	T(0xE091300Eu, ADDS(R3, R1, OP(LR)));
	T(0xE091400Fu, ADDS(R4, R1, OP(PC)));
	T(0xE0925001u, ADDS(R5, R2, OP(R1)));
	T(0xE0936001u, ADDS(R6, R3, OP(R1)));
	T(0xE0947001u, ADDS(R7, R4, OP(R1)));
	T(0xE0958001u, ADDS(R8, R5, OP(R1)));
	T(0xE09B9001u, ADDS(R9, FP, OP(R1)));
	T(0xE09EA001u, ADDS(SL, LR, OP(R1)));
	T(0xE09FB001u, ADDS(FP, PC, OP(R1)));
}

def test_and(t: ArmTester) {
	asm.w.at(0);
	def T = t.check;
	def AND = asm.and;
	def OP = ArmOperand.Reg;

	T(0xE00E0002u, AND(R0, LR, OP(R2)));
	T(0xE00D2003u, AND(R2, SP, OP(R3)));
	T(0xE00B6005u, AND(R6, FP, OP(R5)));
	T(0xE00A800Bu, AND(R8, SL, OP(FP)));
	T(0xE009A00Eu, AND(SL, R9, OP(LR)));
	T(0xE007E001u, AND(LR, R7, OP(R1)));
	T(0xE0061001u, AND(R1, R6, OP(R1)));
	T(0xE0053001u, AND(R3, R5, OP(R1)));
	T(0xE0045001u, AND(R5, R4, OP(R1)));
	T(0xE0037001u, AND(R7, R3, OP(R1)));
	T(0xE0029001u, AND(R9, R2, OP(R1)));
	T(0xE001B001u, AND(FP, R1, OP(R1)));
	T(0xE00FD002u, AND(SP, PC, OP(R2)));
	T(0xE00EE003u, AND(LR, LR, OP(R3)));
	T(0xE00D0004u, AND(R0, SP, OP(R4)));
	T(0xE00B200Bu, AND(R2, FP, OP(FP)));
	T(0xE00A300Eu, AND(R3, SL, OP(LR)));
	T(0xE009400Fu, AND(R4, R9, OP(PC)));
	T(0xE0085001u, AND(R5, R8, OP(R1)));
	T(0xE0076001u, AND(R6, R7, OP(R1)));
	T(0xE0067001u, AND(R7, R6, OP(R1)));
	T(0xE0058001u, AND(R8, R5, OP(R1)));
	T(0xE0049001u, AND(R9, R4, OP(R1)));
	T(0xE003A001u, AND(SL, R3, OP(R1)));
	T(0xE002B001u, AND(FP, R2, OP(R1)));
	T(0xE000B001u, AND(FP, R0, OP(R1)));

	def ANDS = asm.ands;

	T(0xE01E0002u, ANDS(R0, LR, OP(R2)));
	T(0xE01D2003u, ANDS(R2, SP, OP(R3)));
	T(0xE01B6005u, ANDS(R6, FP, OP(R5)));
	T(0xE01A800Bu, ANDS(R8, SL, OP(FP)));
	T(0xE019A00Eu, ANDS(SL, R9, OP(LR)));
	T(0xE017E001u, ANDS(LR, R7, OP(R1)));
	T(0xE0161001u, ANDS(R1, R6, OP(R1)));
	T(0xE0153001u, ANDS(R3, R5, OP(R1)));
	T(0xE0145001u, ANDS(R5, R4, OP(R1)));
	T(0xE0137001u, ANDS(R7, R3, OP(R1)));
	T(0xE0129001u, ANDS(R9, R2, OP(R1)));
	T(0xE011B001u, ANDS(FP, R1, OP(R1)));
	T(0xE01FD002u, ANDS(SP, PC, OP(R2)));
	T(0xE01EE003u, ANDS(LR, LR, OP(R3)));
	T(0xE01D0004u, ANDS(R0, SP, OP(R4)));
	T(0xE01B200Bu, ANDS(R2, FP, OP(FP)));
	T(0xE01A300Eu, ANDS(R3, SL, OP(LR)));
	T(0xE019400Fu, ANDS(R4, R9, OP(PC)));
	T(0xE0185000u, ANDS(R5, R8, OP(R0)));
	T(0xE0176002u, ANDS(R6, R7, OP(R2)));
	T(0xE0167004u, ANDS(R7, R6, OP(R4)));
	T(0xE0158008u, ANDS(R8, R5, OP(R8)));
	T(0xE014900Au, ANDS(R9, R4, OP(SL)));
	T(0xE012B00Eu, ANDS(FP, R2, OP(LR)));
	T(0xE010B008u, ANDS(FP, R0, OP(R8)));
}

def test_eor(t: ArmTester) {
	asm.w.at(0);
	def T = t.check;
	def EOR = asm.eor;
	def OP = ArmOperand.Reg;

	T(0xE02E0002u, EOR(R0, LR, OP(R2)));
	T(0xE02D2003u, EOR(R2, SP, OP(R3)));
	T(0xE02B6005u, EOR(R6, FP, OP(R5)));
	T(0xE02A800Bu, EOR(R8, SL, OP(FP)));
	T(0xE029A00Eu, EOR(SL, R9, OP(LR)));
	T(0xE027E001u, EOR(LR, R7, OP(R1)));
	T(0xE0261001u, EOR(R1, R6, OP(R1)));
	T(0xE0253001u, EOR(R3, R5, OP(R1)));
	T(0xE0245001u, EOR(R5, R4, OP(R1)));
	T(0xE0237001u, EOR(R7, R3, OP(R1)));
	T(0xE0229001u, EOR(R9, R2, OP(R1)));
	T(0xE021B001u, EOR(FP, R1, OP(R1)));
	T(0xE02EE003u, EOR(LR, LR, OP(R3)));
	T(0xE02D0004u, EOR(R0, SP, OP(R4)));
	T(0xE02B200Bu, EOR(R2, FP, OP(FP)));
	T(0xE02A300Eu, EOR(R3, SL, OP(LR)));
	T(0xE0285000u, EOR(R5, R8, OP(R0)));
	T(0xE0276002u, EOR(R6, R7, OP(R2)));
	T(0xE0267004u, EOR(R7, R6, OP(R4)));
	T(0xE0258008u, EOR(R8, R5, OP(R8)));
	T(0xE024900Au, EOR(R9, R4, OP(SL)));
	T(0xE022B00Eu, EOR(FP, R2, OP(LR)));
	T(0xE020B008u, EOR(FP, R0, OP(R8)));

	def EORS = asm.eors;

	T(0xE03E0002u, EORS(R0, LR, OP(R2)));
	T(0xE03D2003u, EORS(R2, SP, OP(R3)));
	T(0xE03B6005u, EORS(R6, FP, OP(R5)));
	T(0xE03A800Bu, EORS(R8, SL, OP(FP)));
	T(0xE039A00Eu, EORS(SL, R9, OP(LR)));
	T(0xE037E001u, EORS(LR, R7, OP(R1)));
	T(0xE0361001u, EORS(R1, R6, OP(R1)));
	T(0xE0353001u, EORS(R3, R5, OP(R1)));
	T(0xE0345001u, EORS(R5, R4, OP(R1)));
	T(0xE0337001u, EORS(R7, R3, OP(R1)));
	T(0xE0329001u, EORS(R9, R2, OP(R1)));
	T(0xE031B001u, EORS(FP, R1, OP(R1)));
	T(0xE03EE003u, EORS(LR, LR, OP(R3)));
	T(0xE03D0004u, EORS(R0, SP, OP(R4)));
	T(0xE03B200Bu, EORS(R2, FP, OP(FP)));
	T(0xE03A300Eu, EORS(R3, SL, OP(LR)));
	T(0xE0385000u, EORS(R5, R8, OP(R0)));
	T(0xE0376002u, EORS(R6, R7, OP(R2)));
	T(0xE0367004u, EORS(R7, R6, OP(R4)));
	T(0xE0358008u, EORS(R8, R5, OP(R8)));
	T(0xE034900Au, EORS(R9, R4, OP(SL)));
	T(0xE032B00Eu, EORS(FP, R2, OP(LR)));
	T(0xE030B008u, EORS(FP, R0, OP(R8)));
}

def test_orr(t: ArmTester) {
	asm.w.at(0);
	def T = t.check;
	def ORR = asm.orr;
	def OP = ArmOperand.Reg;

	T(0xE18E0002u, ORR(R0, LR, OP(R2)));
	T(0xE18D2003u, ORR(R2, SP, OP(R3)));
	T(0xE18B6005u, ORR(R6, FP, OP(R5)));
	T(0xE18A800Bu, ORR(R8, SL, OP(FP)));
	T(0xE189A00Eu, ORR(SL, R9, OP(LR)));
	T(0xE187E001u, ORR(LR, R7, OP(R1)));
	T(0xE1861001u, ORR(R1, R6, OP(R1)));
	T(0xE1853001u, ORR(R3, R5, OP(R1)));
	T(0xE1845001u, ORR(R5, R4, OP(R1)));
	T(0xE1837001u, ORR(R7, R3, OP(R1)));
	T(0xE1829001u, ORR(R9, R2, OP(R1)));
	T(0xE181B001u, ORR(FP, R1, OP(R1)));
	T(0xE18EE003u, ORR(LR, LR, OP(R3)));
	T(0xE18D0004u, ORR(R0, SP, OP(R4)));
	T(0xE18B200Bu, ORR(R2, FP, OP(FP)));
	T(0xE18A300Eu, ORR(R3, SL, OP(LR)));
	T(0xE1885000u, ORR(R5, R8, OP(R0)));
	T(0xE1876002u, ORR(R6, R7, OP(R2)));
	T(0xE1867004u, ORR(R7, R6, OP(R4)));
	T(0xE1858008u, ORR(R8, R5, OP(R8)));
	T(0xE184900Au, ORR(R9, R4, OP(SL)));
	T(0xE182B00Eu, ORR(FP, R2, OP(LR)));
	T(0xE180B008u, ORR(FP, R0, OP(R8)));

	def ORRS = asm.orrs;

	T(0xE19E0002u, ORRS(R0, LR, OP(R2)));
	T(0xE19D2003u, ORRS(R2, SP, OP(R3)));
	T(0xE19B6005u, ORRS(R6, FP, OP(R5)));
	T(0xE19A800Bu, ORRS(R8, SL, OP(FP)));
	T(0xE199A00Eu, ORRS(SL, R9, OP(LR)));
	T(0xE197E001u, ORRS(LR, R7, OP(R1)));
	T(0xE1961001u, ORRS(R1, R6, OP(R1)));
	T(0xE1953001u, ORRS(R3, R5, OP(R1)));
	T(0xE1945001u, ORRS(R5, R4, OP(R1)));
	T(0xE1937001u, ORRS(R7, R3, OP(R1)));
	T(0xE1929001u, ORRS(R9, R2, OP(R1)));
	T(0xE191B001u, ORRS(FP, R1, OP(R1)));
	T(0xE19EE003u, ORRS(LR, LR, OP(R3)));
	T(0xE19D0004u, ORRS(R0, SP, OP(R4)));
	T(0xE19B200Bu, ORRS(R2, FP, OP(FP)));
	T(0xE19A300Eu, ORRS(R3, SL, OP(LR)));
	T(0xE1985000u, ORRS(R5, R8, OP(R0)));
	T(0xE1976002u, ORRS(R6, R7, OP(R2)));
	T(0xE1967004u, ORRS(R7, R6, OP(R4)));
	T(0xE1958008u, ORRS(R8, R5, OP(R8)));
	T(0xE194900Au, ORRS(R9, R4, OP(SL)));
	T(0xE192B00Eu, ORRS(FP, R2, OP(LR)));
	T(0xE190B008u, ORRS(FP, R0, OP(R8)));
}

def test_3addr(t: ArmTester) {
	asm.w.at(0);
	def T = t.check;
	def OP = ArmOperand.Reg;

	T(0xE0800000u, asm.add(R0, R0, OP(R0)));
	T(0xE0877007u, asm.add(R7, R7, OP(R7)));
	T(0xE0888008u, asm.add(R8, R8, OP(R8)));
	T(0xE0900000u, asm.adds(R0, R0, OP(R0)));
	T(0xE0977007u, asm.adds(R7, R7, OP(R7)));
	T(0xE0988008u, asm.adds(R8, R8, OP(R8)));
	T(0xE0A00000u, asm.adc(R0, R0, OP(R0)));
	T(0xE0A77007u, asm.adc(R7, R7, OP(R7)));
	T(0xE0A88008u, asm.adc(R8, R8, OP(R8)));
	T(0xE0A00000u, asm.adc(R0, R0, OP(R0)));
	T(0xE0A77007u, asm.adc(R7, R7, OP(R7)));
	T(0xE0A88008u, asm.adc(R8, R8, OP(R8)));
	T(0xE0000000u, asm.and(R0, R0, OP(R0)));
	T(0xE0077007u, asm.and(R7, R7, OP(R7)));
	T(0xE0088008u, asm.and(R8, R8, OP(R8)));
	T(0xE0100000u, asm.ands(R0, R0, OP(R0)));
	T(0xE0177007u, asm.ands(R7, R7, OP(R7)));
	T(0xE0188008u, asm.ands(R8, R8, OP(R8)));
	T(0xE0200000u, asm.eor(R0, R0, OP(R0)));
	T(0xE0277007u, asm.eor(R7, R7, OP(R7)));
	T(0xE0288008u, asm.eor(R8, R8, OP(R8)));
	T(0xE0300000u, asm.eors(R0, R0, OP(R0)));
	T(0xE0377007u, asm.eors(R7, R7, OP(R7)));
	T(0xE0388008u, asm.eors(R8, R8, OP(R8)));
	T(0xE1800000u, asm.orr(R0, R0, OP(R0)));
	T(0xE1877007u, asm.orr(R7, R7, OP(R7)));
	T(0xE1888008u, asm.orr(R8, R8, OP(R8)));
	T(0xE1900000u, asm.orrs(R0, R0, OP(R0)));
	T(0xE1977007u, asm.orrs(R7, R7, OP(R7)));
	T(0xE1988008u, asm.orrs(R8, R8, OP(R8)));
	T(0xE0400000u, asm.sub(R0, R0, OP(R0)));
	T(0xE0477007u, asm.sub(R7, R7, OP(R7)));
	T(0xE0488008u, asm.sub(R8, R8, OP(R8)));
	T(0xE0500000u, asm.subs(R0, R0, OP(R0)));
	T(0xE0577007u, asm.subs(R7, R7, OP(R7)));
	T(0xE0588008u, asm.subs(R8, R8, OP(R8)));

	// TODO: shifted operands
}

def test_cond(t: ArmTester) {
	asm.w.at(0);
	def T = t.check;
	def PR = ArmOperand.Reg;

	T(0x00800000u, asm.eq().add(R0, R0, PR(R0)));
	T(0x10800000u, asm.ne().add(R0, R0, PR(R0)));
	T(0x20800000u, asm.cs().add(R0, R0, PR(R0)));
	T(0x30800000u, asm.cc().add(R0, R0, PR(R0)));
	T(0x40800000u, asm.mi().add(R0, R0, PR(R0)));
	T(0x50800000u, asm.pl().add(R0, R0, PR(R0)));
	T(0x60800000u, asm.vs().add(R0, R0, PR(R0)));
	T(0x70800000u, asm.vc().add(R0, R0, PR(R0)));
	T(0x80800000u, asm.hi().add(R0, R0, PR(R0)));
	T(0x90800000u, asm.ls().add(R0, R0, PR(R0)));
	T(0xA0800000u, asm.ge().add(R0, R0, PR(R0)));
	T(0xB0800000u, asm.lt().add(R0, R0, PR(R0)));
	T(0xC0800000u, asm.gt().add(R0, R0, PR(R0)));
	T(0xD0800000u, asm.le().add(R0, R0, PR(R0)));
	T(0xE0800000u, asm.al().add(R0, R0, PR(R0)));

	T(0x00800000u, asm.eq().add(R0, R0, PR(R0)));
	T(0x10801000u, asm.ne().add(R1, R0, PR(R0)));
	T(0x20802000u, asm.cs().add(R2, R0, PR(R0)));
	T(0x30803000u, asm.cc().add(R3, R0, PR(R0)));
	T(0x40804000u, asm.mi().add(R4, R0, PR(R0)));
	T(0x50805000u, asm.pl().add(R5, R0, PR(R0)));
	T(0x60806000u, asm.vs().add(R6, R0, PR(R0)));
	T(0x70807000u, asm.vc().add(R7, R0, PR(R0)));
	T(0x80808000u, asm.hi().add(R8, R0, PR(R0)));
	T(0x90809000u, asm.ls().add(R9, R0, PR(R0)));
	T(0xA080A000u, asm.ge().add(SL, R0, PR(R0)));
	T(0xB080B000u, asm.lt().add(FP, R0, PR(R0)));
//	T(0xC080C000u, asm.gt().add(IP, R0, PR(R0)));
	T(0xD080D000u, asm.le().add(SP, R0, PR(R0)));
	T(0xE080E000u, asm.al().add(LR, R0, PR(R0)));
	T(0xC080F000u, asm.gt().add(PC, R0, PR(R0)));
	T(0xD080F000u, asm.le().add(PC, R0, PR(R0)));
	T(0xE080F000u, asm.al().add(PC, R0, PR(R0)));
	T(0x008F0000u, asm.eq().add(R0, PC, PR(R0)));
	T(0x108E0000u, asm.ne().add(R0, LR, PR(R0)));
	T(0x208D0000u, asm.cs().add(R0, SP, PR(R0)));
//	T(0x308C0000u, asm.cc().add(R0, IP, PR(R0)));
	T(0x408B0000u, asm.mi().add(R0, FP, PR(R0)));
	T(0x508A0000u, asm.pl().add(R0, SL, PR(R0)));
	T(0x60890000u, asm.vs().add(R0, R9, PR(R0)));
	T(0x70880000u, asm.vc().add(R0, R8, PR(R0)));
	T(0x80870000u, asm.hi().add(R0, R7, PR(R0)));
	T(0x90860000u, asm.ls().add(R0, R6, PR(R0)));
	T(0xA0850000u, asm.ge().add(R0, R5, PR(R0)));
	T(0xB0840000u, asm.lt().add(R0, R4, PR(R0)));
	T(0xC0830000u, asm.gt().add(R0, R3, PR(R0)));
	T(0xD0820000u, asm.le().add(R0, R2, PR(R0)));
	T(0xE0810000u, asm.al().add(R0, R1, PR(R0)));
	T(0xC0800000u, asm.gt().add(R0, R0, PR(R0)));
	T(0xD0820000u, asm.le().add(R0, R2, PR(R0)));
	T(0xE0830000u, asm.al().add(R0, R3, PR(R0)));
	T(0x00800007u, asm.eq().add(R0, R0, PR(R7)));
	T(0x10800008u, asm.ne().add(R0, R0, PR(R8)));
	T(0x20800009u, asm.cs().add(R0, R0, PR(R9)));
	T(0x3080000Au, asm.cc().add(R0, R0, PR(SL)));
	T(0x4080000Bu, asm.mi().add(R0, R0, PR(FP)));
//	T(0x5080000Cu, asm.pl().add(R0, R0, PR(IP)));
	T(0x6080000Du, asm.vs().add(R0, R0, PR(SP)));
	T(0x7080000Eu, asm.vc().add(R0, R0, PR(LR)));
	T(0x8080000Fu, asm.hi().add(R0, R0, PR(PC)));
	T(0x90800000u, asm.ls().add(R0, R0, PR(R0)));
	T(0xA0800001u, asm.ge().add(R0, R0, PR(R1)));
	T(0xB0800002u, asm.lt().add(R0, R0, PR(R2)));
	T(0xC0800003u, asm.gt().add(R0, R0, PR(R3)));
	T(0xD0800004u, asm.le().add(R0, R0, PR(R4)));
	T(0xE0800005u, asm.al().add(R0, R0, PR(R5)));
	T(0xC0800006u, asm.gt().add(R0, R0, PR(R6)));
	T(0xD0800007u, asm.le().add(R0, R0, PR(R7)));
	T(0xE0800008u, asm.al().add(R0, R0, PR(R8)));

	T(0x01800000u, asm.eq().orr(R0, R0, PR(R0)));
	T(0x11801000u, asm.ne().orr(R1, R0, PR(R0)));
	T(0x21802000u, asm.cs().orr(R2, R0, PR(R0)));
	T(0x31803000u, asm.cc().orr(R3, R0, PR(R0)));
	T(0x41804000u, asm.mi().orr(R4, R0, PR(R0)));
	T(0x51805000u, asm.pl().orr(R5, R0, PR(R0)));
	T(0x61806000u, asm.vs().orr(R6, R0, PR(R0)));
	T(0x71807000u, asm.vc().orr(R7, R0, PR(R0)));
	T(0x81808000u, asm.hi().orr(R8, R0, PR(R0)));
	T(0x91809000u, asm.ls().orr(R9, R0, PR(R0)));
	T(0xA180A000u, asm.ge().orr(SL, R0, PR(R0)));
	T(0xB180B000u, asm.lt().orr(FP, R0, PR(R0)));
//	T(0xC180C000u, asm.gt().orr(IP, R0, PR(R0)));
	T(0xD180D000u, asm.le().orr(SP, R0, PR(R0)));
	T(0xE180E000u, asm.al().orr(LR, R0, PR(R0)));
	T(0xC180F000u, asm.gt().orr(PC, R0, PR(R0)));
	T(0xD180F000u, asm.le().orr(PC, R0, PR(R0)));
	T(0xE180F000u, asm.al().orr(PC, R0, PR(R0)));
}

def test_cmp(t: ArmTester) {
	asm.w.at(0);
	def T = t.check;
	def CMP = asm.cmp;
	def OP = ArmOperand.Reg;

	T(0xE1500000u, CMP(R0, OP(R0)));
	T(0xE1500001u, CMP(R0, OP(R1)));
	T(0xE1500003u, CMP(R0, OP(R3)));
	T(0xE1500005u, CMP(R0, OP(R5)));
	T(0xE1500006u, CMP(R0, OP(R6)));
	T(0xE1500007u, CMP(R0, OP(R7)));
	T(0xE1500009u, CMP(R0, OP(R9)));
	T(0xE150000Au, CMP(R0, OP(SL)));
	T(0xE150000Bu, CMP(R0, OP(FP)));
// TODO	T(0xE150000Cu, CMP(R0, OP(IP)));
	T(0xE150000Du, CMP(R0, OP(SP)));
	T(0xE150000Eu, CMP(R0, OP(LR)));
	T(0xE150000Fu, CMP(R0, OP(PC)));
	T(0xE15F0000u, CMP(PC, OP(R0)));
	T(0xE15E0000u, CMP(LR, OP(R0)));
	T(0xE15D0000u, CMP(SP, OP(R0)));
// TODO	T(0xE15C0000u, CMP(IP, OP(R0)));
	T(0xE15B0000u, CMP(FP, OP(R0)));
	T(0xE15A0000u, CMP(SL, OP(R0)));
	T(0xE1590000u, CMP(R9, OP(R0)));
	T(0xE1570000u, CMP(R7, OP(R0)));
	T(0xE1560000u, CMP(R6, OP(R0)));
	T(0xE1550000u, CMP(R5, OP(R0)));
	T(0xE1530000u, CMP(R3, OP(R0)));
	T(0xE1510000u, CMP(R1, OP(R0)));
}

def test_cmn(t: ArmTester) {
	asm.w.at(0);
	def T = t.check;
	def CMN = asm.cmn;
	def OP = ArmOperand.Reg;

	T(0xE1700000u, CMN(R0, OP(R0)));
	T(0xE1700001u, CMN(R0, OP(R1)));
	T(0xE1700003u, CMN(R0, OP(R3)));
	T(0xE1700005u, CMN(R0, OP(R5)));
	T(0xE1700006u, CMN(R0, OP(R6)));
	T(0xE1700007u, CMN(R0, OP(R7)));
	T(0xE1700009u, CMN(R0, OP(R9)));
	T(0xE170000Au, CMN(R0, OP(SL)));
	T(0xE170000Bu, CMN(R0, OP(FP)));
// TODO	T(0xE170000Cu, CMN(R0, OP(IP)));
	T(0xE170000Du, CMN(R0, OP(SP)));
	T(0xE170000Eu, CMN(R0, OP(LR)));
	T(0xE170000Fu, CMN(R0, OP(PC)));
	T(0xE17F0000u, CMN(PC, OP(R0)));
	T(0xE17E0000u, CMN(LR, OP(R0)));
	T(0xE17D0000u, CMN(SP, OP(R0)));
// TODO	T(0xE17C0000u, CMN(IP, OP(R0)));
	T(0xE17B0000u, CMN(FP, OP(R0)));
	T(0xE17A0000u, CMN(SL, OP(R0)));
	T(0xE1790000u, CMN(R9, OP(R0)));
	T(0xE1770000u, CMN(R7, OP(R0)));
	T(0xE1760000u, CMN(R6, OP(R0)));
	T(0xE1750000u, CMN(R5, OP(R0)));
	T(0xE1730000u, CMN(R3, OP(R0)));
	T(0xE1710000u, CMN(R1, OP(R0)));
}

def test_ldr(t: ArmTester) {
	asm.w.at(0);
	def T = t.check;
	def LDR = asm.ldrw;
	def LDRB = asm.ldrbzx;
	def LDRSB = asm.ldrbsx;
	def ZERO: ArmOffset;
	def P = ArmOffset.AddImm;
	def N = ArmOffset.SubImm;
	def PR = ArmOffset.AddReg;
	def NR = ArmOffset.SubReg;

	T(0xE5916000u, LDR(R6, R1, ZERO));
	T(0xE5976000u, LDR(R6, R7, ZERO));
	T(0xE5986000u, LDR(R6, R8, ZERO));
	T(0xE5D16000u, LDRB(R6, R1, ZERO));
	T(0xE5D76000u, LDRB(R6, R7, ZERO));
	T(0xE5D86000u, LDRB(R6, R8, ZERO));

	T(0xE591400Bu, LDR(R4, R1, P(11)));
	T(0xE59743E7u, LDR(R4, R7, P(999)));
	T(0xE5984FFFu, LDR(R4, R8, P(4095)));
	T(0xE5D1400Bu, LDRB(R4, R1, P(11)));
	T(0xE5D743E7u, LDRB(R4, R7, P(999)));
	T(0xE5D84FFFu, LDRB(R4, R8, P(4095)));

	T(0xE511400Cu, LDR(R4, R1, N(12)));
	T(0xE51743D1u, LDR(R4, R7, N(977)));
	T(0xE5184FABu, LDR(R4, R8, N(4011)));
	T(0xE551400Bu, LDRB(R4, R1, N(11)));
	T(0xE55743D1u, LDRB(R4, R7, N(977)));
	T(0xE5584FABu, LDRB(R4, R8, N(4011)));

	T(0xE7914000u, LDR(R4, R1, PR(R0)));
	T(0xE7974008u, LDR(R4, R7, PR(R8)));
	T(0xE7984007u, LDR(R4, R8, PR(R7)));
	T(0xE7D14000u, LDRB(R4, R1, PR(R0)));
	T(0xE7D74008u, LDRB(R4, R7, PR(R8)));
	T(0xE7D84007u, LDRB(R4, R8, PR(R7)));

	T(0xE7114007u, LDR(R4, R1, NR(R7)));
	T(0xE7174008u, LDR(R4, R7, NR(R8)));
	T(0xE7184000u, LDR(R4, R8, NR(R0)));
	T(0xE7514007u, LDRB(R4, R1, NR(R7)));
	T(0xE7574008u, LDRB(R4, R7, NR(R8)));
	T(0xE7584000u, LDRB(R4, R8, NR(R0)));

	T(0xE5900000u, LDR(R0, R0, ZERO));
	T(0xE5910000u, LDR(R0, R1, ZERO));
	T(0xE5920000u, LDR(R0, R2, ZERO));
	T(0xE5930000u, LDR(R0, R3, ZERO));
	T(0xE5940000u, LDR(R0, R4, ZERO));
	T(0xE5950000u, LDR(R0, R5, ZERO));
	T(0xE5960000u, LDR(R0, R6, ZERO));
	T(0xE5970000u, LDR(R0, R7, ZERO));
	T(0xE5980000u, LDR(R0, R8, ZERO));
	T(0xE5990000u, LDR(R0, R9, ZERO));
	T(0xE59A0000u, LDR(R0, SL, ZERO));
	T(0xE59B0000u, LDR(R0, FP, ZERO));
// TODO	T(0xE59C0000u, LDR(R0, IP, ZERO));
	T(0xE59D0000u, LDR(R0, SP, ZERO));
	T(0xE59E0000u, LDR(R0, LR, ZERO));
	T(0xE590F000u, LDR(PC, R0, ZERO));
	T(0xE590F000u, LDR(PC, R0, ZERO));
	T(0xE590E000u, LDR(LR, R0, ZERO));
	T(0xE590D000u, LDR(SP, R0, ZERO));
// TODO	T(0xE590C000u, LDR(IP, R0, ZERO));
	T(0xE590B000u, LDR(FP, R0, ZERO));
	T(0xE590A000u, LDR(SL, R0, ZERO));
	T(0xE5909000u, LDR(R9, R0, ZERO));
	T(0xE5908000u, LDR(R8, R0, ZERO));
	T(0xE5907000u, LDR(R7, R0, ZERO));
	T(0xE5906000u, LDR(R6, R0, ZERO));
	T(0xE5905000u, LDR(R5, R0, ZERO));
	T(0xE5904000u, LDR(R4, R0, ZERO));
	T(0xE5903000u, LDR(R3, R0, ZERO));
	T(0xE5902000u, LDR(R2, R0, ZERO));
	T(0xE5901000u, LDR(R1, R0, ZERO));

	T(0xE5910001u, LDR(R0, R1, P(1)));
	T(0xE5910002u, LDR(R0, R1, P(2)));
	T(0xE5910003u, LDR(R0, R1, P(3)));
	T(0xE5921007u, LDR(R1, R2, P(7)));
	T(0xE5921008u, LDR(R1, R2, P(8)));
	T(0xE5921009u, LDR(R1, R2, P(9)));
	T(0xE593200Fu, LDR(R2, R3, P(15)));
	T(0xE5932010u, LDR(R2, R3, P(16)));
	T(0xE5932011u, LDR(R2, R3, P(17)));
	T(0xE595401Fu, LDR(R4, R5, P(31)));
	T(0xE5954020u, LDR(R4, R5, P(32)));
	T(0xE5954021u, LDR(R4, R5, P(33)));
	T(0xE597603Fu, LDR(R6, R7, P(63)));
	T(0xE5976040u, LDR(R6, R7, P(64)));
	T(0xE5976041u, LDR(R6, R7, P(65)));
	T(0xE599807Fu, LDR(R8, R9, P(127)));
	T(0xE5998080u, LDR(R8, R9, P(128)));
	T(0xE5998081u, LDR(R8, R9, P(129)));
	T(0xE59BA0FFu, LDR(SL, FP, P(255)));
	T(0xE59BA100u, LDR(SL, FP, P(256)));
	T(0xE59BA101u, LDR(SL, FP, P(257)));
	T(0xE59891FFu, LDR(R9, R8, P(511)));
	T(0xE5989200u, LDR(R9, R8, P(512)));
	T(0xE5989201u, LDR(R9, R8, P(513)));
	T(0xE59EEFFEu, LDR(LR, LR, P(4094)));
	T(0xE59EEFFFu, LDR(LR, LR, P(4095)));

	T(0xE5110001u, LDR(R0, R1, N(1)));
	T(0xE5110002u, LDR(R0, R1, N(2)));
	T(0xE5110003u, LDR(R0, R1, N(3)));
	T(0xE5121007u, LDR(R1, R2, N(7)));
	T(0xE5121008u, LDR(R1, R2, N(8)));
	T(0xE5121009u, LDR(R1, R2, N(9)));
	T(0xE513200Fu, LDR(R2, R3, N(15)));
	T(0xE5132010u, LDR(R2, R3, N(16)));
	T(0xE5132011u, LDR(R2, R3, N(17)));
	T(0xE515401Fu, LDR(R4, R5, N(31)));
	T(0xE5154020u, LDR(R4, R5, N(32)));
	T(0xE5154021u, LDR(R4, R5, N(33)));
	T(0xE517603Fu, LDR(R6, R7, N(63)));
	T(0xE5176040u, LDR(R6, R7, N(64)));
	T(0xE5176041u, LDR(R6, R7, N(65)));
	T(0xE519807Fu, LDR(R8, R9, N(127)));
	T(0xE5198080u, LDR(R8, R9, N(128)));
	T(0xE5198081u, LDR(R8, R9, N(129)));
	T(0xE51BA0FFu, LDR(SL, FP, N(255)));
	T(0xE51BA100u, LDR(SL, FP, N(256)));
	T(0xE51BA101u, LDR(SL, FP, N(257)));
	T(0xE51891FFu, LDR(R9, R8, N(511)));
	T(0xE5189200u, LDR(R9, R8, N(512)));
	T(0xE5189201u, LDR(R9, R8, N(513)));
	T(0xE51EEFFEu, LDR(LR, LR, N(4094)));
	T(0xE51EEFFFu, LDR(LR, LR, N(4095)));

	T(0xE7910002u, LDR(R0, R1, PR(R2)));
	T(0xE7910003u, LDR(R0, R1, PR(R3)));
	T(0xE7910004u, LDR(R0, R1, PR(R4)));
	T(0xE7921003u, LDR(R1, R2, PR(R3)));
	T(0xE7921004u, LDR(R1, R2, PR(R4)));
	T(0xE7921005u, LDR(R1, R2, PR(R5)));
	T(0xE7932004u, LDR(R2, R3, PR(R4)));
	T(0xE7932005u, LDR(R2, R3, PR(R5)));
	T(0xE7932006u, LDR(R2, R3, PR(R6)));
	T(0xE7954006u, LDR(R4, R5, PR(R6)));
	T(0xE7954007u, LDR(R4, R5, PR(R7)));
	T(0xE7954008u, LDR(R4, R5, PR(R8)));
	T(0xE7976008u, LDR(R6, R7, PR(R8)));
	T(0xE7976009u, LDR(R6, R7, PR(R9)));
	T(0xE797600Au, LDR(R6, R7, PR(SL)));
	T(0xE799800Au, LDR(R8, R9, PR(SL)));
	T(0xE799800Au, LDR(R8, R9, PR(SL)));
	T(0xE799800Au, LDR(R8, R9, PR(SL)));
// TODO	T(0xE79BA002u, LDR(R7, FP, PR(R2)));
// TODO	T(0xE79BA001u, LDR(R7, FP, PR(R1)));
// TODO	T(0xE79BA000u, LDR(R7, FP, PR(R0)));
	T(0xE7989005u, LDR(R9, R8, PR(R5)));
	T(0xE7989004u, LDR(R9, R8, PR(R4)));
	T(0xE7989003u, LDR(R9, R8, PR(R3)));
	T(0xE79EE001u, LDR(R14, LR, PR(R1)));
	T(0xE79EE000u, LDR(R14, LR, PR(R0)));

	T(0xE7110002u, LDR(R0, R1, NR(R2)));
	T(0xE7110003u, LDR(R0, R1, NR(R3)));
	T(0xE7110004u, LDR(R0, R1, NR(R4)));
	T(0xE7121003u, LDR(R1, R2, NR(R3)));
	T(0xE7121004u, LDR(R1, R2, NR(R4)));
	T(0xE7121005u, LDR(R1, R2, NR(R5)));
	T(0xE7132004u, LDR(R2, R3, NR(R4)));
	T(0xE7132005u, LDR(R2, R3, NR(R5)));
	T(0xE7132006u, LDR(R2, R3, NR(R6)));
	T(0xE7154006u, LDR(R4, R5, NR(R6)));
	T(0xE7154007u, LDR(R4, R5, NR(R7)));
	T(0xE7154008u, LDR(R4, R5, NR(R8)));
	T(0xE7176008u, LDR(R6, R7, NR(R8)));
	T(0xE7176009u, LDR(R6, R7, NR(R9)));
	T(0xE717600Au, LDR(R6, R7, NR(SL)));
	T(0xE719800Au, LDR(R8, R9, NR(SL)));
	T(0xE719800Au, LDR(R8, R9, NR(SL)));
	T(0xE719800Au, LDR(R8, R9, NR(SL)));
// TODO	T(0xE71BA002u, LDR(RL, FP, NR(R2)));
// TODO	T(0xE71BA001u, LDR(RL, FP, NR(R1)));
// TODO	T(0xE71BA000u, LDR(RL, FP, NR(R0)));
	T(0xE7189005u, LDR(R9, R8, NR(R5)));
	T(0xE7189004u, LDR(R9, R8, NR(R4)));
	T(0xE7189003u, LDR(R9, R8, NR(R3)));
// TODO	T(0xE71EE001u, LDR(RR, LR, NR(R1)));
// TODO	T(0xE71EE000u, LDR(RR, LR, NR(R0)));
}

def test_ldrsb(t: ArmTester) {
	asm.w.at(0);
	def T = t.check;
	def LDRSB = asm.ldrbsx;
	def ZERO: ArmSmallOffset;
	def P = ArmSmallOffset.AddImm;
	def N = ArmSmallOffset.SubImm;
	def PR = ArmSmallOffset.AddReg;
	def NR = ArmSmallOffset.SubReg;

	T(0xE1D000D0u, LDRSB(R0, R0, ZERO));
	T(0xE1D710D0u, LDRSB(R1, R7, ZERO));
	T(0xE1D820D0u, LDRSB(R2, R8, ZERO));
	T(0xE1D030D0u, LDRSB(R3, R0, ZERO));
	T(0xE1D740D0u, LDRSB(R4, R7, ZERO));
	T(0xE1D850D0u, LDRSB(R5, R8, ZERO));
	T(0xE1D060D0u, LDRSB(R6, R0, ZERO));
	T(0xE1D770D0u, LDRSB(R7, R7, ZERO));
	T(0xE1D880D0u, LDRSB(R8, R8, ZERO));
	T(0xE1D090D0u, LDRSB(R9, R0, ZERO));
	T(0xE1D7A0D0u, LDRSB(SL, R7, ZERO));
	T(0xE1D8B0D0u, LDRSB(FP, R8, ZERO));
	T(0xE1D7D0D0u, LDRSB(SP, R7, ZERO));
	T(0xE1D8E0D0u, LDRSB(LR, R8, ZERO));

	T(0xE1DB00D0u, LDRSB(R0, FP, ZERO));
	T(0xE1D170D0u, LDRSB(R7, R1, ZERO));
	T(0xE1D280D0u, LDRSB(R8, R2, ZERO));
	T(0xE1D300D0u, LDRSB(R0, R3, ZERO));
	T(0xE1D470D0u, LDRSB(R7, R4, ZERO));
	T(0xE1D580D0u, LDRSB(R8, R5, ZERO));
	T(0xE1D600D0u, LDRSB(R0, R6, ZERO));
	T(0xE1D770D0u, LDRSB(R7, R7, ZERO));
	T(0xE1D880D0u, LDRSB(R8, R8, ZERO));
	T(0xE1D900D0u, LDRSB(R0, R9, ZERO));
	T(0xE1DA70D0u, LDRSB(R7, SL, ZERO));
	T(0xE1DB80D0u, LDRSB(R8, FP, ZERO));
	T(0xE1DD70D0u, LDRSB(R7, SP, ZERO));

	T(0xE1D730D1u, LDRSB(R3, R7, P(1)));
	T(0xE1D860D2u, LDRSB(R6, R8, P(2)));
	T(0xE1DBA0D3u, LDRSB(SL, FP, P(3)));
	T(0xE1D730D6u, LDRSB(R3, R7, P(6)));
	T(0xE1D860D7u, LDRSB(R6, R8, P(7)));
	T(0xE1DBA0DBu, LDRSB(SL, FP, P(11)));
	T(0xE1D730DFu, LDRSB(R3, R7, P(15)));
	T(0xE1D861D1u, LDRSB(R6, R8, P(17)));
	T(0xE1DBA3DFu, LDRSB(SL, FP, P(63)));
	T(0xE1D737DFu, LDRSB(R3, R7, P(127)));
	T(0xE1D868D0u, LDRSB(R6, R8, P(128)));
	T(0xE1DBAFDEu, LDRSB(SL, FP, P(254)));
	T(0xE1D73FDFu, LDRSB(R3, R7, P(255)));
	T(0xE1D86FDAu, LDRSB(R6, R8, P(250)));
	T(0xE1DBA6D5u, LDRSB(SL, FP, P(101)));

	T(0xE15730D1u, LDRSB(R3, R7, N(1)));
	T(0xE15860D2u, LDRSB(R6, R8, N(2)));
	T(0xE15BA0D3u, LDRSB(SL, FP, N(3)));
	T(0xE15730D6u, LDRSB(R3, R7, N(6)));
	T(0xE15860D7u, LDRSB(R6, R8, N(7)));
	T(0xE15BA0DBu, LDRSB(SL, FP, N(11)));
	T(0xE15730DFu, LDRSB(R3, R7, N(15)));
	T(0xE15861D1u, LDRSB(R6, R8, N(17)));
	T(0xE15BA3DFu, LDRSB(SL, FP, N(63)));
	T(0xE15737DFu, LDRSB(R3, R7, N(127)));
	T(0xE15868D0u, LDRSB(R6, R8, N(128)));
	T(0xE15BAFDEu, LDRSB(SL, FP, N(254)));
	T(0xE1573FDFu, LDRSB(R3, R7, N(255)));
	T(0xE1586FDAu, LDRSB(R6, R8, N(250)));
	T(0xE15BA6D5u, LDRSB(SL, FP, N(101)));

	T(0xE19730D0u, LDRSB(R3, R7, PR(R0)));
	T(0xE19860D1u, LDRSB(R6, R8, PR(R1)));
	T(0xE19BA0D2u, LDRSB(SL, FP, PR(R2)));
	T(0xE19730D3u, LDRSB(R3, R7, PR(R3)));
	T(0xE19860D4u, LDRSB(R6, R8, PR(R4)));
	T(0xE19BA0D5u, LDRSB(SL, FP, PR(R5)));
	T(0xE19730D6u, LDRSB(R3, R7, PR(R6)));
	T(0xE19860D7u, LDRSB(R6, R8, PR(R7)));
	T(0xE19BA0D8u, LDRSB(SL, FP, PR(R8)));
	T(0xE19730D9u, LDRSB(R3, R7, PR(R9)));
	T(0xE19860DAu, LDRSB(R6, R8, PR(SL)));
	T(0xE19BA0DBu, LDRSB(SL, FP, PR(FP)));
	T(0xE19730DDu, LDRSB(R3, R7, PR(SP)));
	T(0xE19860D3u, LDRSB(R6, R8, PR(R3)));
	T(0xE19BA0D6u, LDRSB(SL, FP, PR(R6)));

	T(0xE11730D0u, LDRSB(R3, R7, NR(R0)));
	T(0xE11860D1u, LDRSB(R6, R8, NR(R1)));
	T(0xE11BA0D2u, LDRSB(SL, FP, NR(R2)));
	T(0xE11730D3u, LDRSB(R3, R7, NR(R3)));
	T(0xE11860D4u, LDRSB(R6, R8, NR(R4)));
	T(0xE11BA0D5u, LDRSB(SL, FP, NR(R5)));
	T(0xE11730D6u, LDRSB(R3, R7, NR(R6)));
	T(0xE11860D7u, LDRSB(R6, R8, NR(R7)));
	T(0xE11BA0D8u, LDRSB(SL, FP, NR(R8)));
	T(0xE11730D9u, LDRSB(R3, R7, NR(R9)));
	T(0xE11860DAu, LDRSB(R6, R8, NR(SL)));
	T(0xE11BA0DBu, LDRSB(SL, FP, NR(FP)));
	T(0xE11730DDu, LDRSB(R3, R7, NR(SP)));
	T(0xE11860D3u, LDRSB(R6, R8, NR(R3)));
	T(0xE11BA0D6u, LDRSB(SL, FP, NR(R6)));
}

def test_ldrsh(t: ArmTester) {
	asm.w.at(0);
	def T = t.check;
	def LDRSH = asm.ldrhsx;
	def ZERO: ArmSmallOffset;
	def P = ArmSmallOffset.AddImm;
	def N = ArmSmallOffset.SubImm;
	def PR = ArmSmallOffset.AddReg;
	def NR = ArmSmallOffset.SubReg;

	T(0xE1D040F0u, LDRSH(R4, R0, ZERO));
	T(0xE1D150F0u, LDRSH(R5, R1, ZERO));
	T(0xE1D2D0F0u, LDRSH(SP, R2, ZERO));
	T(0xE1D340F0u, LDRSH(R4, R3, ZERO));
	T(0xE1D450F0u, LDRSH(R5, R4, ZERO));
	T(0xE1D5D0F0u, LDRSH(SP, R5, ZERO));
	T(0xE1D640F0u, LDRSH(R4, R6, ZERO));
	T(0xE1D750F0u, LDRSH(R5, R7, ZERO));
	T(0xE1D8D0F0u, LDRSH(SP, R8, ZERO));
	T(0xE1D940F0u, LDRSH(R4, R9, ZERO));
	T(0xE1DA50F0u, LDRSH(R5, SL, ZERO));
	T(0xE1DBD0F0u, LDRSH(SP, FP, ZERO));
	T(0xE1DD40F0u, LDRSH(R4, SP, ZERO));
	T(0xE1D350F0u, LDRSH(R5, R3, ZERO));
	T(0xE1D6D0F0u, LDRSH(SP, R6, ZERO));

	T(0xE1D040F1u, LDRSH(R4, R0, P(1)));
	T(0xE1D150F2u, LDRSH(R5, R1, P(2)));
	T(0xE1D2D0F3u, LDRSH(SP, R2, P(3)));
	T(0xE1D340F4u, LDRSH(R4, R3, P(4)));
	T(0xE1D450F9u, LDRSH(R5, R4, P(9)));
	T(0xE1D5D0FBu, LDRSH(SP, R5, P(11)));
	T(0xE1D640FFu, LDRSH(R4, R6, P(15)));
	T(0xE1D751F1u, LDRSH(R5, R7, P(17)));
	T(0xE1D8D1F7u, LDRSH(SP, R8, P(23)));
	T(0xE1D943FFu, LDRSH(R4, R9, P(63)));
	T(0xE1DA57FFu, LDRSH(R5, SL, P(127)));
	T(0xE1DBDFFFu, LDRSH(SP, FP, P(255)));
	T(0xE1DD4FFAu, LDRSH(R4, SP, P(250)));
	T(0xE1D356F6u, LDRSH(R5, R3, P(102)));
	T(0xE1D6D6F3u, LDRSH(SP, R6, P(99)));

	T(0xE15040F1u, LDRSH(R4, R0, N(1)));
	T(0xE15150F2u, LDRSH(R5, R1, N(2)));
	T(0xE152D0F3u, LDRSH(SP, R2, N(3)));
	T(0xE15340F4u, LDRSH(R4, R3, N(4)));
	T(0xE15450F9u, LDRSH(R5, R4, N(9)));
	T(0xE155D0FBu, LDRSH(SP, R5, N(11)));
	T(0xE15640FFu, LDRSH(R4, R6, N(15)));
	T(0xE15751F1u, LDRSH(R5, R7, N(17)));
	T(0xE158D1F7u, LDRSH(SP, R8, N(23)));
	T(0xE15943FFu, LDRSH(R4, R9, N(63)));
	T(0xE15A57FFu, LDRSH(R5, SL, N(127)));
	T(0xE15BDFFFu, LDRSH(SP, FP, N(255)));
	T(0xE15D4FFAu, LDRSH(R4, SP, N(250)));
	T(0xE15356F6u, LDRSH(R5, R3, N(102)));
	T(0xE156D6F3u, LDRSH(SP, R6, N(99)));

	T(0xE19740F0u, LDRSH(R4, R7, PR(R0)));
	T(0xE19850F1u, LDRSH(R5, R8, PR(R1)));
	T(0xE19BD0F2u, LDRSH(SP, FP, PR(R2)));
	T(0xE19740F3u, LDRSH(R4, R7, PR(R3)));
	T(0xE19850F4u, LDRSH(R5, R8, PR(R4)));
	T(0xE19BD0F5u, LDRSH(SP, FP, PR(R5)));
	T(0xE19740F6u, LDRSH(R4, R7, PR(R6)));
	T(0xE19850F7u, LDRSH(R5, R8, PR(R7)));
	T(0xE19BD0F8u, LDRSH(SP, FP, PR(R8)));
	T(0xE19740F9u, LDRSH(R4, R7, PR(R9)));
	T(0xE19850FAu, LDRSH(R5, R8, PR(SL)));
	T(0xE19BD0FBu, LDRSH(SP, FP, PR(FP)));
	T(0xE19740FDu, LDRSH(R4, R7, PR(SP)));
	T(0xE19850F3u, LDRSH(R5, R8, PR(R3)));
	T(0xE19BD0F6u, LDRSH(SP, FP, PR(R6)));

	T(0xE11740F0u, LDRSH(R4, R7, NR(R0)));
	T(0xE11850F1u, LDRSH(R5, R8, NR(R1)));
	T(0xE11BD0F2u, LDRSH(SP, FP, NR(R2)));
	T(0xE11740F3u, LDRSH(R4, R7, NR(R3)));
	T(0xE11850F4u, LDRSH(R5, R8, NR(R4)));
	T(0xE11BD0F5u, LDRSH(SP, FP, NR(R5)));
	T(0xE11740F6u, LDRSH(R4, R7, NR(R6)));
	T(0xE11850F7u, LDRSH(R5, R8, NR(R7)));
	T(0xE11BD0F8u, LDRSH(SP, FP, NR(R8)));
	T(0xE11740F9u, LDRSH(R4, R7, NR(R9)));
	T(0xE11850FAu, LDRSH(R5, R8, NR(SL)));
	T(0xE11BD0FBu, LDRSH(SP, FP, NR(FP)));
	T(0xE11740FDu, LDRSH(R4, R7, NR(SP)));
	T(0xE11850F3u, LDRSH(R5, R8, NR(R3)));
	T(0xE11BD0F6u, LDRSH(SP, FP, NR(R6)));
}

def test_ldrh(t: ArmTester) {
	asm.w.at(0);
	def T = t.check;
	def LDRH = asm.ldrhzx;
	def ZERO: ArmSmallOffset;
	def P = ArmSmallOffset.AddImm;
	def N = ArmSmallOffset.SubImm;
	def PR = ArmSmallOffset.AddReg;
	def NR = ArmSmallOffset.SubReg;

	T(0xE1D040B0u, LDRH(R4, R0, ZERO));
	T(0xE1D150B0u, LDRH(R5, R1, ZERO));
	T(0xE1D2D0B0u, LDRH(SP, R2, ZERO));
	T(0xE1D340B0u, LDRH(R4, R3, ZERO));
	T(0xE1D450B0u, LDRH(R5, R4, ZERO));
	T(0xE1D5D0B0u, LDRH(SP, R5, ZERO));
	T(0xE1D640B0u, LDRH(R4, R6, ZERO));
	T(0xE1D750B0u, LDRH(R5, R7, ZERO));
	T(0xE1D8D0B0u, LDRH(SP, R8, ZERO));
	T(0xE1D940B0u, LDRH(R4, R9, ZERO));
	T(0xE1DA50B0u, LDRH(R5, SL, ZERO));
	T(0xE1DBD0B0u, LDRH(SP, FP, ZERO));
	T(0xE1DD40B0u, LDRH(R4, SP, ZERO));
	T(0xE1D350B0u, LDRH(R5, R3, ZERO));
	T(0xE1D6D0B0u, LDRH(SP, R6, ZERO));

	T(0xE1D040B1u, LDRH(R4, R0, P(1)));
	T(0xE1D150B2u, LDRH(R5, R1, P(2)));
	T(0xE1D2D0B3u, LDRH(SP, R2, P(3)));
	T(0xE1D340B4u, LDRH(R4, R3, P(4)));
	T(0xE1D450B9u, LDRH(R5, R4, P(9)));
	T(0xE1D5D0BBu, LDRH(SP, R5, P(11)));
	T(0xE1D640BFu, LDRH(R4, R6, P(15)));
	T(0xE1D751B1u, LDRH(R5, R7, P(17)));
	T(0xE1D8D1B7u, LDRH(SP, R8, P(23)));
	T(0xE1D943BFu, LDRH(R4, R9, P(63)));
	T(0xE1DA57BFu, LDRH(R5, SL, P(127)));
	T(0xE1DBDFBFu, LDRH(SP, FP, P(255)));
	T(0xE1DD4FBAu, LDRH(R4, SP, P(250)));
	T(0xE1D356B6u, LDRH(R5, R3, P(102)));
	T(0xE1D6D6B3u, LDRH(SP, R6, P(99)));

	T(0xE15040B1u, LDRH(R4, R0, N(1)));
	T(0xE15150B2u, LDRH(R5, R1, N(2)));
	T(0xE152D0B3u, LDRH(SP, R2, N(3)));
	T(0xE15340B4u, LDRH(R4, R3, N(4)));
	T(0xE15450B9u, LDRH(R5, R4, N(9)));
	T(0xE155D0BBu, LDRH(SP, R5, N(11)));
	T(0xE15640BFu, LDRH(R4, R6, N(15)));
	T(0xE15751B1u, LDRH(R5, R7, N(17)));
	T(0xE158D1B7u, LDRH(SP, R8, N(23)));
	T(0xE15943BFu, LDRH(R4, R9, N(63)));
	T(0xE15A57BFu, LDRH(R5, SL, N(127)));
	T(0xE15BDFBFu, LDRH(SP, FP, N(255)));
	T(0xE15D4FBAu, LDRH(R4, SP, N(250)));
	T(0xE15356B6u, LDRH(R5, R3, N(102)));
	T(0xE156D6B3u, LDRH(SP, R6, N(99)));

	T(0xE19740B0u, LDRH(R4, R7, PR(R0)));
	T(0xE19850B1u, LDRH(R5, R8, PR(R1)));
	T(0xE19BD0B2u, LDRH(SP, FP, PR(R2)));
	T(0xE19740B3u, LDRH(R4, R7, PR(R3)));
	T(0xE19850B4u, LDRH(R5, R8, PR(R4)));
	T(0xE19BD0B5u, LDRH(SP, FP, PR(R5)));
	T(0xE19740B6u, LDRH(R4, R7, PR(R6)));
	T(0xE19850B7u, LDRH(R5, R8, PR(R7)));
	T(0xE19BD0B8u, LDRH(SP, FP, PR(R8)));
	T(0xE19740B9u, LDRH(R4, R7, PR(R9)));
	T(0xE19850BAu, LDRH(R5, R8, PR(SL)));
	T(0xE19BD0BBu, LDRH(SP, FP, PR(FP)));
	T(0xE19740BDu, LDRH(R4, R7, PR(SP)));
	T(0xE19850B3u, LDRH(R5, R8, PR(R3)));
	T(0xE19BD0B6u, LDRH(SP, FP, PR(R6)));

	T(0xE11740B0u, LDRH(R4, R7, NR(R0)));
	T(0xE11850B1u, LDRH(R5, R8, NR(R1)));
	T(0xE11BD0B2u, LDRH(SP, FP, NR(R2)));
	T(0xE11740B3u, LDRH(R4, R7, NR(R3)));
	T(0xE11850B4u, LDRH(R5, R8, NR(R4)));
	T(0xE11BD0B5u, LDRH(SP, FP, NR(R5)));
	T(0xE11740B6u, LDRH(R4, R7, NR(R6)));
	T(0xE11850B7u, LDRH(R5, R8, NR(R7)));
	T(0xE11BD0B8u, LDRH(SP, FP, NR(R8)));
	T(0xE11740B9u, LDRH(R4, R7, NR(R9)));
	T(0xE11850BAu, LDRH(R5, R8, NR(SL)));
	T(0xE11BD0BBu, LDRH(SP, FP, NR(FP)));
	T(0xE11740BDu, LDRH(R4, R7, NR(SP)));
	T(0xE11850B3u, LDRH(R5, R8, NR(R3)));
	T(0xE11BD0B6u, LDRH(SP, FP, NR(R6)));
}

def test_str(t: ArmTester) {
	asm.w.at(0);
	def T = t.check;
	def STRW = asm.strw;
	def STRB = asm.strb;
	def STRH = asm.strh;
	def ZERO: ArmOffset;
	def P = ArmOffset.AddImm;
	def N = ArmOffset.SubImm;
	def PR = ArmOffset.AddReg;
	def NR = ArmOffset.SubReg;

	T(0xE5816000u, STRW(R6, R1, ZERO));
	T(0xE5876000u, STRW(R6, R7, ZERO));
	T(0xE5886000u, STRW(R6, R8, ZERO));
	T(0xE5C16000u, STRB(R6, R1, ZERO));
	T(0xE5C76000u, STRB(R6, R7, ZERO));
	T(0xE5C86000u, STRB(R6, R8, ZERO));
	T(0xE581400Bu, STRW(R4, R1, P(11)));
	T(0xE58743E7u, STRW(R4, R7, P(999)));
	T(0xE5884FFFu, STRW(R4, R8, P(4095)));
	T(0xE5C1400Bu, STRB(R4, R1, P(11)));
	T(0xE5C743E7u, STRB(R4, R7, P(999)));
	T(0xE5C84FFFu, STRB(R4, R8, P(4095)));
	T(0xE501400Cu, STRW(R4, R1, N(12)));
	T(0xE50743D1u, STRW(R4, R7, N(977)));
	T(0xE5084FABu, STRW(R4, R8, N(4011)));
	T(0xE541400Bu, STRB(R4, R1, N(11)));
	T(0xE54743D1u, STRB(R4, R7, N(977)));
	T(0xE5484FABu, STRB(R4, R8, N(4011)));
	T(0xE7814000u, STRW(R4, R1, PR(R0)));
	T(0xE7874008u, STRW(R4, R7, PR(R8)));
	T(0xE7884007u, STRW(R4, R8, PR(R7)));
	T(0xE7C14000u, STRB(R4, R1, PR(R0)));
	T(0xE7C74008u, STRB(R4, R7, PR(R8)));
	T(0xE7C84007u, STRB(R4, R8, PR(R7)));
	T(0xE7014007u, STRW(R4, R1, NR(R7)));
	T(0xE7074008u, STRW(R4, R7, NR(R8)));
	T(0xE7084000u, STRW(R4, R8, NR(R0)));
	T(0xE7414007u, STRB(R4, R1, NR(R7)));
	T(0xE7474008u, STRB(R4, R7, NR(R8)));
	T(0xE7484000u, STRB(R4, R8, NR(R0)));

	T(0xE5807000u, STRW(R7, R0, ZERO));
	T(0xE5818000u, STRW(R8, R1, ZERO));
	T(0xE5820000u, STRW(R0, R2, ZERO));
	T(0xE5837000u, STRW(R7, R3, ZERO));
	T(0xE5848000u, STRW(R8, R4, ZERO));
	T(0xE5850000u, STRW(R0, R5, ZERO));
	T(0xE5867000u, STRW(R7, R6, ZERO));
	T(0xE5878000u, STRW(R8, R7, ZERO));
	T(0xE5880000u, STRW(R0, R8, ZERO));
	T(0xE5897000u, STRW(R7, R9, ZERO));
	T(0xE58A8000u, STRW(R8, SL, ZERO));
	T(0xE58B0000u, STRW(R0, FP, ZERO));
	T(0xE58D8000u, STRW(R8, SP, ZERO));
	T(0xE58E0000u, STRW(R0, LR, ZERO));
	T(0xE587F000u, STRW(PC, R7, ZERO));
	T(0xE580E000u, STRW(LR, R0, ZERO));
	T(0xE588D000u, STRW(SP, R8, ZERO));
	T(0xE580B000u, STRW(FP, R0, ZERO));
	T(0xE588A000u, STRW(SL, R8, ZERO));
	T(0xE5879000u, STRW(R9, R7, ZERO));
	T(0xE5808000u, STRW(R8, R0, ZERO));
	T(0xE5887000u, STRW(R7, R8, ZERO));
	T(0xE5876000u, STRW(R6, R7, ZERO));
	T(0xE5805000u, STRW(R5, R0, ZERO));
	T(0xE5884000u, STRW(R4, R8, ZERO));
	T(0xE5873000u, STRW(R3, R7, ZERO));
	T(0xE5802000u, STRW(R2, R0, ZERO));
	T(0xE5881000u, STRW(R1, R8, ZERO));
	T(0xE5870000u, STRW(R0, R7, ZERO));

	T(0xE580706Fu, STRW(R7, R0, P(111)));
	T(0xE58180DEu, STRW(R8, R1, P(222)));
	T(0xE582014Du, STRW(R0, R2, P(333)));
	T(0xE58371BCu, STRW(R7, R3, P(444)));
	T(0xE584822Bu, STRW(R8, R4, P(555)));
	T(0xE585029Au, STRW(R0, R5, P(666)));
	T(0xE5867309u, STRW(R7, R6, P(777)));
	T(0xE5878378u, STRW(R8, R7, P(888)));
	T(0xE58803E7u, STRW(R0, R8, P(999)));
	T(0xE5897457u, STRW(R7, R9, P(1111)));
	T(0xE58A84C6u, STRW(R8, SL, P(1222)));
	T(0xE58B0535u, STRW(R0, FP, P(1333)));
	T(0xE58D8613u, STRW(R8, SP, P(1555)));
	T(0xE58E0682u, STRW(R0, LR, P(1666)));
	T(0xE587F760u, STRW(PC, R7, P(1888)));
	T(0xE580E7CFu, STRW(LR, R0, P(1999)));
	T(0xE588DFABu, STRW(SP, R8, P(4011)));
	T(0xE580BFC1u, STRW(FP, R0, P(4033)));
	T(0xE588AFCCu, STRW(SL, R8, P(4044)));
	T(0xE5879FD7u, STRW(R9, R7, P(4055)));
	T(0xE5808FE2u, STRW(R8, R0, P(4066)));
	T(0xE5887FEDu, STRW(R7, R8, P(4077)));
	T(0xE5876FF8u, STRW(R6, R7, P(4088)));
	T(0xE5805FFEu, STRW(R5, R0, P(4094)));
	T(0xE5884FFFu, STRW(R4, R8, P(4095)));
	T(0xE58737FFu, STRW(R3, R7, P(2047)));
	T(0xE5802800u, STRW(R2, R0, P(2048)));
	T(0xE5881801u, STRW(R1, R8, P(2049)));
	T(0xE5870802u, STRW(R0, R7, P(2050)));

	T(0xE500706Fu, STRW(R7, R0, N(111)));
	T(0xE50180DEu, STRW(R8, R1, N(222)));
	T(0xE502014Du, STRW(R0, R2, N(333)));
	T(0xE50371BCu, STRW(R7, R3, N(444)));
	T(0xE504822Bu, STRW(R8, R4, N(555)));
	T(0xE505029Au, STRW(R0, R5, N(666)));
	T(0xE5067309u, STRW(R7, R6, N(777)));
	T(0xE5078378u, STRW(R8, R7, N(888)));
	T(0xE50803E7u, STRW(R0, R8, N(999)));
	T(0xE5097457u, STRW(R7, R9, N(1111)));
	T(0xE50A84C6u, STRW(R8, SL, N(1222)));
	T(0xE50B0535u, STRW(R0, FP, N(1333)));
	T(0xE50D8613u, STRW(R8, SP, N(1555)));
	T(0xE50E0682u, STRW(R0, LR, N(1666)));
	T(0xE50F76F1u, STRW(R7, PC, N(1777)));
	T(0xE507F760u, STRW(PC, R7, N(1888)));
	T(0xE500E7CFu, STRW(LR, R0, N(1999)));
	T(0xE508DFABu, STRW(SP, R8, N(4011)));
	T(0xE500BFC1u, STRW(FP, R0, N(4033)));
	T(0xE508AFCCu, STRW(SL, R8, N(4044)));
	T(0xE5079FD7u, STRW(R9, R7, N(4055)));
	T(0xE5008FE2u, STRW(R8, R0, N(4066)));
	T(0xE5087FEDu, STRW(R7, R8, N(4077)));
	T(0xE5076FF8u, STRW(R6, R7, N(4088)));
	T(0xE5005FFEu, STRW(R5, R0, N(4094)));
	T(0xE5084FFFu, STRW(R4, R8, N(4095)));
	T(0xE50737FFu, STRW(R3, R7, N(2047)));
	T(0xE5002800u, STRW(R2, R0, N(2048)));
	T(0xE5081801u, STRW(R1, R8, N(2049)));
	T(0xE5070802u, STRW(R0, R7, N(2050)));

	T(0xE7807000u, STRW(R7, R0, PR(R0)));
	T(0xE7818003u, STRW(R8, R1, PR(R3)));
	T(0xE7820006u, STRW(R0, R2, PR(R6)));
	T(0xE7837009u, STRW(R7, R3, PR(R9)));
	T(0xE785000Du, STRW(R0, R5, PR(SP)));
	T(0xE7867001u, STRW(R7, R6, PR(R1)));
	T(0xE7878004u, STRW(R8, R7, PR(R4)));
	T(0xE7880007u, STRW(R0, R8, PR(R7)));
	T(0xE789700Au, STRW(R7, R9, PR(SL)));
	T(0xE78A800Du, STRW(R8, SL, PR(SP)));
	T(0xE78B0002u, STRW(R0, FP, PR(R2)));
	T(0xE78D8008u, STRW(R8, SP, PR(R8)));
	T(0xE78E000Bu, STRW(R0, LR, PR(FP)));
	T(0xE78D700Eu, STRW(R7, SP, PR(LR)));
	T(0xE787F005u, STRW(PC, R7, PR(R5)));
	T(0xE780E00Au, STRW(LR, R0, PR(SL)));
	T(0xE788D00Du, STRW(SP, R8, PR(SP)));
	T(0xE780B00Bu, STRW(FP, R0, PR(FP)));
	T(0xE788A001u, STRW(SL, R8, PR(R1)));
	T(0xE7808007u, STRW(R8, R0, PR(R7)));
	T(0xE7887009u, STRW(R7, R8, PR(R9)));
	T(0xE7876002u, STRW(R6, R7, PR(R2)));
	T(0xE7805004u, STRW(R5, R0, PR(R4)));
	T(0xE788400Bu, STRW(R4, R8, PR(FP)));
	T(0xE7873003u, STRW(R3, R7, PR(R3)));
	T(0xE7802003u, STRW(R2, R0, PR(R3)));
	T(0xE7881002u, STRW(R1, R8, PR(R2)));
	T(0xE7870001u, STRW(R0, R7, PR(R1)));
}

def test_strh(t: ArmTester) {
	asm.w.at(0);
	def T = t.check;
	def STRH = asm.strh;
	def ZERO: ArmSmallOffset;
	def P = ArmSmallOffset.AddImm;
	def N = ArmSmallOffset.SubImm;
	def PR = ArmSmallOffset.AddReg;
	def NR = ArmSmallOffset.SubReg;

	T(0xE1C040B0u, STRH(R4, R0, ZERO));
	T(0xE1C150B0u, STRH(R5, R1, ZERO));
	T(0xE1C2D0B0u, STRH(SP, R2, ZERO));
	T(0xE1C340B0u, STRH(R4, R3, ZERO));
	T(0xE1C450B0u, STRH(R5, R4, ZERO));
	T(0xE1C5D0B0u, STRH(SP, R5, ZERO));
	T(0xE1C640B0u, STRH(R4, R6, ZERO));
	T(0xE1C750B0u, STRH(R5, R7, ZERO));
	T(0xE1C8D0B0u, STRH(SP, R8, ZERO));
	T(0xE1C940B0u, STRH(R4, R9, ZERO));
	T(0xE1CA50B0u, STRH(R5, SL, ZERO));
	T(0xE1CBD0B0u, STRH(SP, FP, ZERO));
	T(0xE1CD40B0u, STRH(R4, SP, ZERO));
	T(0xE1C350B0u, STRH(R5, R3, ZERO));
	T(0xE1C6D0B0u, STRH(SP, R6, ZERO));

	T(0xE1C040B1u, STRH(R4, R0, P(1)));
	T(0xE1C150B2u, STRH(R5, R1, P(2)));
	T(0xE1C2D0B3u, STRH(SP, R2, P(3)));
	T(0xE1C340B4u, STRH(R4, R3, P(4)));
	T(0xE1C450B9u, STRH(R5, R4, P(9)));
	T(0xE1C5D0BBu, STRH(SP, R5, P(11)));
	T(0xE1C640BFu, STRH(R4, R6, P(15)));
	T(0xE1C751B1u, STRH(R5, R7, P(17)));
	T(0xE1C8D1B7u, STRH(SP, R8, P(23)));
	T(0xE1C943BFu, STRH(R4, R9, P(63)));
	T(0xE1CA57BFu, STRH(R5, SL, P(127)));
	T(0xE1CBDFBFu, STRH(SP, FP, P(255)));
	T(0xE1CD4FBAu, STRH(R4, SP, P(250)));
	T(0xE1C356B6u, STRH(R5, R3, P(102)));
	T(0xE1C6D6B3u, STRH(SP, R6, P(99)));

	T(0xE14040B1u, STRH(R4, R0, N(1)));
	T(0xE14150B2u, STRH(R5, R1, N(2)));
	T(0xE142D0B3u, STRH(SP, R2, N(3)));
	T(0xE14340B4u, STRH(R4, R3, N(4)));
	T(0xE14450B9u, STRH(R5, R4, N(9)));
	T(0xE145D0BBu, STRH(SP, R5, N(11)));
	T(0xE14640BFu, STRH(R4, R6, N(15)));
	T(0xE14751B1u, STRH(R5, R7, N(17)));
	T(0xE148D1B7u, STRH(SP, R8, N(23)));
	T(0xE14943BFu, STRH(R4, R9, N(63)));
	T(0xE14A57BFu, STRH(R5, SL, N(127)));
	T(0xE14BDFBFu, STRH(SP, FP, N(255)));
	T(0xE14D4FBAu, STRH(R4, SP, N(250)));
	T(0xE14356B6u, STRH(R5, R3, N(102)));
	T(0xE146D6B3u, STRH(SP, R6, N(99)));

	T(0xE18740B0u, STRH(R4, R7, PR(R0)));
	T(0xE18850B1u, STRH(R5, R8, PR(R1)));
	T(0xE18BD0B2u, STRH(SP, FP, PR(R2)));
	T(0xE18740B3u, STRH(R4, R7, PR(R3)));
	T(0xE18850B4u, STRH(R5, R8, PR(R4)));
	T(0xE18BD0B5u, STRH(SP, FP, PR(R5)));
	T(0xE18740B6u, STRH(R4, R7, PR(R6)));
	T(0xE18850B7u, STRH(R5, R8, PR(R7)));
	T(0xE18BD0B8u, STRH(SP, FP, PR(R8)));
	T(0xE18740B9u, STRH(R4, R7, PR(R9)));
	T(0xE18850BAu, STRH(R5, R8, PR(SL)));
	T(0xE18BD0BBu, STRH(SP, FP, PR(FP)));
	T(0xE18740BDu, STRH(R4, R7, PR(SP)));
	T(0xE18850B3u, STRH(R5, R8, PR(R3)));
	T(0xE18BD0B6u, STRH(SP, FP, PR(R6)));

	T(0xE10740B0u, STRH(R4, R7, NR(R0)));
	T(0xE10850B1u, STRH(R5, R8, NR(R1)));
	T(0xE10BD0B2u, STRH(SP, FP, NR(R2)));
	T(0xE10740B3u, STRH(R4, R7, NR(R3)));
	T(0xE10850B4u, STRH(R5, R8, NR(R4)));
	T(0xE10BD0B5u, STRH(SP, FP, NR(R5)));
	T(0xE10740B6u, STRH(R4, R7, NR(R6)));
	T(0xE10850B7u, STRH(R5, R8, NR(R7)));
	T(0xE10BD0B8u, STRH(SP, FP, NR(R8)));
	T(0xE10740B9u, STRH(R4, R7, NR(R9)));
	T(0xE10850BAu, STRH(R5, R8, NR(SL)));
	T(0xE10BD0BBu, STRH(SP, FP, NR(FP)));
	T(0xE10740BDu, STRH(R4, R7, NR(SP)));
	T(0xE10850B3u, STRH(R5, R8, NR(R3)));
	T(0xE10BD0B6u, STRH(SP, FP, NR(R6)));
}

def test_mov(t: ArmTester) {
	asm.w.at(0);
	def T = t.check;
	def MOV = asm.mov;
	def MOVS = asm.movs;
	def R = ArmOperand.Reg;

	T(0xE1A0000F, MOV(R0, R(PC)));
	T(0xE1A0000E, MOV(R0, R(LR)));
	T(0xE1A0000D, MOV(R0, R(SP)));
	T(0xE1A0000B, MOV(R0, R(FP)));
	T(0xE1A0000A, MOV(R0, R(SL)));
	T(0xE1A00009, MOV(R0, R(R9)));
	T(0xE1A00008, MOV(R0, R(R8)));
	T(0xE1A00007, MOV(R0, R(R7)));
	T(0xE1A00006, MOV(R0, R(R6)));
	T(0xE1A00005, MOV(R0, R(R5)));
	T(0xE1A00004, MOV(R0, R(R4)));
	T(0xE1A00003, MOV(R0, R(R3)));
	T(0xE1A00002, MOV(R0, R(R2)));
	T(0xE1A00001, MOV(R0, R(R1)));

	T(0xE1A0800F, MOV(R8, R(PC)));
	T(0xE1A0700E, MOV(R7, R(LR)));
	T(0xE1A0000D, MOV(R0, R(SP)));
	T(0xE1A0500B, MOV(R5, R(FP)));
	T(0xE1A0200A, MOV(R2, R(SL)));
	T(0xE1A03009, MOV(R3, R(R9)));
	T(0xE1A04008, MOV(R4, R(R8)));
	T(0xE1A01007, MOV(R1, R(R7)));
	T(0xE1A05006, MOV(R5, R(R6)));
	T(0xE1A0A005, MOV(SL, R(R5)));
	T(0xE1A0B004, MOV(FP, R(R4)));
	T(0xE1A0D002, MOV(SP, R(R2)));
	T(0xE1A0E001, MOV(LR, R(R1)));
	T(0xE1A0F000, MOV(PC, R(R0)));

	T(0xE1B0000F, MOVS(R0, R(PC)));
	T(0xE1B0000E, MOVS(R0, R(LR)));
	T(0xE1B0000D, MOVS(R0, R(SP)));
	T(0xE1B0000B, MOVS(R0, R(FP)));
	T(0xE1B0000A, MOVS(R0, R(SL)));
	T(0xE1B00009, MOVS(R0, R(R9)));
	T(0xE1B00008, MOVS(R0, R(R8)));
	T(0xE1B00007, MOVS(R0, R(R7)));
	T(0xE1B00006, MOVS(R0, R(R6)));
	T(0xE1B00005, MOVS(R0, R(R5)));
	T(0xE1B00004, MOVS(R0, R(R4)));
	T(0xE1B00003, MOVS(R0, R(R3)));
	T(0xE1B00002, MOVS(R0, R(R2)));
	T(0xE1B00001, MOVS(R0, R(R1)));
	T(0xE1B00000, MOVS(R0, R(R0)));

	T(0xE1B0800F, MOVS(R8, R(PC)));
	T(0xE1B0700E, MOVS(R7, R(LR)));
	T(0xE1B0000D, MOVS(R0, R(SP)));
	T(0xE1B0500B, MOVS(R5, R(FP)));
	T(0xE1B0200A, MOVS(R2, R(SL)));
	T(0xE1B03009, MOVS(R3, R(R9)));
	T(0xE1B04008, MOVS(R4, R(R8)));
	T(0xE1B01007, MOVS(R1, R(R7)));
	T(0xE1B05006, MOVS(R5, R(R6)));
	T(0xE1B0A005, MOVS(SL, R(R5)));
	T(0xE1B0B004, MOVS(FP, R(R4)));
	T(0xE1B0D002, MOVS(SP, R(R2)));
	T(0xE1B0E001, MOVS(LR, R(R1)));
	T(0xE1B0F000, MOVS(PC, R(R0)));

	def LSL = ArmOperand.RegShlImm;

	T(0xE1A00080, MOV(R0, LSL(R0, 1)));
	T(0xE1A00100, MOV(R0, LSL(R0, 2)));
	T(0xE1A00180, MOV(R0, LSL(R0, 3)));
	T(0xE1A00200, MOV(R0, LSL(R0, 4)));
	T(0xE1A00280, MOV(R0, LSL(R0, 5)));
	T(0xE1A00380, MOV(R0, LSL(R0, 7)));
	T(0xE1A00400, MOV(R0, LSL(R0, 8)));
	T(0xE1A00480, MOV(R0, LSL(R0, 9)));
	T(0xE1A00780, MOV(R0, LSL(R0, 15)));
	T(0xE1A00800, MOV(R0, LSL(R0, 16)));
	T(0xE1A00880, MOV(R0, LSL(R0, 17)));
	T(0xE1A00A80, MOV(R0, LSL(R0, 21)));
	T(0xE1A00B00, MOV(R0, LSL(R0, 22)));
	T(0xE1A00B80, MOV(R0, LSL(R0, 23)));
	T(0xE1A00E80, MOV(R0, LSL(R0, 29)));
	T(0xE1A00F00, MOV(R0, LSL(R0, 30)));
	T(0xE1A00F80, MOV(R0, LSL(R0, 31)));

	T(0xE1A00080u, MOV(R0, LSL(R0, 1)));
	T(0xE1A02100u, MOV(R2, LSL(R0, 2)));
	T(0xE1A04180u, MOV(R4, LSL(R0, 3)));
	T(0xE1A06200u, MOV(R6, LSL(R0, 4)));
	T(0xE1A08280u, MOV(R8, LSL(R0, 5)));
	T(0xE1A0A380u, MOV(SL, LSL(R0, 7)));
	T(0xE1A0D480u, MOV(SP, LSL(R0, 9)));
	T(0xE1A0E780u, MOV(LR, LSL(R0, 15)));
	T(0xE1A01880u, MOV(R1, LSL(R0, 17)));
	T(0xE1A03A80u, MOV(R3, LSL(R0, 21)));
	T(0xE1A05B00u, MOV(R5, LSL(R0, 22)));
	T(0xE1A07B80u, MOV(R7, LSL(R0, 23)));
	T(0xE1A09E80u, MOV(R9, LSL(R0, 29)));
	T(0xE1A0BF00u, MOV(FP, LSL(R0, 30)));
	T(0xE1A0DF80u, MOV(SP, LSL(R0, 31)));

	def LSR = ArmOperand.RegShrImm;

	T(0xE1A000A0u, MOV(R0, LSR(R0, 1)));
	T(0xE1A02120u, MOV(R2, LSR(R0, 2)));
	T(0xE1A041A0u, MOV(R4, LSR(R0, 3)));
	T(0xE1A06220u, MOV(R6, LSR(R0, 4)));
	T(0xE1A082A0u, MOV(R8, LSR(R0, 5)));
	T(0xE1A0A3A0u, MOV(SL, LSR(R0, 7)));
	T(0xE1A0D4A0u, MOV(SP, LSR(R0, 9)));
	T(0xE1A0E7A0u, MOV(LR, LSR(R0, 15)));
	T(0xE1A018A0u, MOV(R1, LSR(R0, 17)));
	T(0xE1A03AA0u, MOV(R3, LSR(R0, 21)));
	T(0xE1A05B20u, MOV(R5, LSR(R0, 22)));
	T(0xE1A07BA0u, MOV(R7, LSR(R0, 23)));
	T(0xE1A09EA0u, MOV(R9, LSR(R0, 29)));
	T(0xE1A0BF20u, MOV(FP, LSR(R0, 30)));
	T(0xE1A0DFA0u, MOV(SP, LSR(R0, 31)));

	def ASR = ArmOperand.RegSarImm;

	T(0xE1A000C0u, MOV(R0, ASR(R0, 1)));
	T(0xE1A02140u, MOV(R2, ASR(R0, 2)));
	T(0xE1A041C0u, MOV(R4, ASR(R0, 3)));
	T(0xE1A06240u, MOV(R6, ASR(R0, 4)));
	T(0xE1A082C0u, MOV(R8, ASR(R0, 5)));
	T(0xE1A0A3C0u, MOV(SL, ASR(R0, 7)));
	T(0xE1A0D4C0u, MOV(SP, ASR(R0, 9)));
	T(0xE1A0E7C0u, MOV(LR, ASR(R0, 15)));
	T(0xE1A018C0u, MOV(R1, ASR(R0, 17)));
	T(0xE1A03AC0u, MOV(R3, ASR(R0, 21)));
	T(0xE1A05B40u, MOV(R5, ASR(R0, 22)));
	T(0xE1A07BC0u, MOV(R7, ASR(R0, 23)));
	T(0xE1A09EC0u, MOV(R9, ASR(R0, 29)));
	T(0xE1A0BF40u, MOV(FP, ASR(R0, 30)));
	T(0xE1A0DFC0u, MOV(SP, ASR(R0, 31)));

	def ROR = ArmOperand.RegRorImm;

	T(0xE1A000E0u, MOV(R0, ROR(R0, 1)));
	T(0xE1A02160u, MOV(R2, ROR(R0, 2)));
	T(0xE1A041E0u, MOV(R4, ROR(R0, 3)));
	T(0xE1A06260u, MOV(R6, ROR(R0, 4)));
	T(0xE1A082E0u, MOV(R8, ROR(R0, 5)));
	T(0xE1A0A3E0u, MOV(SL, ROR(R0, 7)));
	T(0xE1A0D4E0u, MOV(SP, ROR(R0, 9)));
	T(0xE1A0E7E0u, MOV(LR, ROR(R0, 15)));
	T(0xE1A018E0u, MOV(R1, ROR(R0, 17)));
	T(0xE1A03AE0u, MOV(R3, ROR(R0, 21)));
	T(0xE1A05B60u, MOV(R5, ROR(R0, 22)));
	T(0xE1A07BE0u, MOV(R7, ROR(R0, 23)));
	T(0xE1A09EE0u, MOV(R9, ROR(R0, 29)));
	T(0xE1A0BF60u, MOV(FP, ROR(R0, 30)));
	T(0xE1A0DFE0u, MOV(SP, ROR(R0, 31)));
}

def test_mul(t: ArmTester) {
	asm.w.at(0);
	def T = t.check;
	def MUL = asm.mul;
	def MULS = asm.muls;
	def R = ArmOperand.Reg;

	T(0xE0000090u, MUL(R0, R0, R0));
	T(0xE0010090u, MUL(R1, R0, R0));
	T(0xE0030090u, MUL(R3, R0, R0));
	T(0xE0070090u, MUL(R7, R0, R0));
	T(0xE0080090u, MUL(R8, R0, R0));
	T(0xE00A0090u, MUL(SL, R0, R0));
	T(0xE00B0090u, MUL(FP, R0, R0));
	T(0xE0000091u, MUL(R0, R1, R0));
	T(0xE0000093u, MUL(R0, R3, R0));
	T(0xE0000097u, MUL(R0, R7, R0));
	T(0xE0000098u, MUL(R0, R8, R0));
	T(0xE000009Au, MUL(R0, SL, R0));
	T(0xE000009Bu, MUL(R0, FP, R0));
	T(0xE0000190u, MUL(R0, R0, R1));
	T(0xE0000390u, MUL(R0, R0, R3));
	T(0xE0000790u, MUL(R0, R0, R7));
	T(0xE0000890u, MUL(R0, R0, R8));
	T(0xE0000A90u, MUL(R0, R0, SL));
	T(0xE0000B90u, MUL(R0, R0, FP));

	T(0xE0100090u, MULS(R0, R0, R0));
	T(0xE0110090u, MULS(R1, R0, R0));
	T(0xE0130090u, MULS(R3, R0, R0));
	T(0xE0170090u, MULS(R7, R0, R0));
	T(0xE0180090u, MULS(R8, R0, R0));
	T(0xE01A0090u, MULS(SL, R0, R0));
	T(0xE01B0090u, MULS(FP, R0, R0));
	T(0xE0100091u, MULS(R0, R1, R0));
	T(0xE0100093u, MULS(R0, R3, R0));
	T(0xE0100097u, MULS(R0, R7, R0));
	T(0xE0100098u, MULS(R0, R8, R0));
	T(0xE010009Au, MULS(R0, SL, R0));
	T(0xE010009Bu, MULS(R0, FP, R0));
	T(0xE0100190u, MULS(R0, R0, R1));
	T(0xE0100390u, MULS(R0, R0, R3));
	T(0xE0100790u, MULS(R0, R0, R7));
	T(0xE0100890u, MULS(R0, R0, R8));
	T(0xE0100A90u, MULS(R0, R0, SL));
	T(0xE0100B90u, MULS(R0, R0, FP));
}

def test_pc(t: ArmTester) {
	// TODO: test use of PC register.
}

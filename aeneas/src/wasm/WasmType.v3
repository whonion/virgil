// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

type WasmType {
	case Void; // XXX: only for block types
	case I32;
	case I64;
	case F32;
	case F64;
	case FuncRef;
	case ExternRef;
	case RefNull(ht: WasmHeapType);

	def render(buf: StringBuilder) -> StringBuilder {
		match (this) {
			Void 		=> buf.puts("void");
			I32 		=> buf.puts("i32");
			I64 		=> buf.puts("i64");
			F32 		=> buf.puts("f32");
			F64 		=> buf.puts("f64");
			FuncRef 	=> buf.puts("funcref");
			ExternRef 	=> buf.puts("externref");
			RefNull(ht) 	=> buf.put1("ref null #%d", ht.index);
		}
		return buf;
	}
	def toInt() -> int {
		match (this) {
			Void 		=> return WasmTypeConCode.EmptyBlock.val;
			I32 		=> return WasmTypeConCode.I32.val;
			I64 		=> return WasmTypeConCode.I64.val;
			F32 		=> return WasmTypeConCode.F32.val;
			F64 		=> return WasmTypeConCode.F64.val;
			FuncRef 	=> return WasmTypeConCode.FUNCREF.val;
			ExternRef 	=> return WasmTypeConCode.EXTERNREF.val;
			RefNull(ht)	=> return int.view(ht.index);
		}
	}
	def put(w: DataWriter) {
		match (this) {
			Void 		=> w.putb(WasmTypeConCode.EmptyBlock.code);
			I32 		=> w.putb(WasmTypeConCode.I32.code);
			I64 		=> w.putb(WasmTypeConCode.I64.code);
			F32 		=> w.putb(WasmTypeConCode.F32.code);
			F64 		=> w.putb(WasmTypeConCode.F64.code);
			FuncRef 	=> w.putb(WasmTypeConCode.FUNCREF.code);
			ExternRef 	=> w.putb(WasmTypeConCode.EXTERNREF.code);
			RefNull(ht)	=> w.putb(WasmTypeConCode.REF_NULL.code).put_uleb32(ht.index);
		}
	}
}
enum WasmPacking {
	PACKED_8S,
	PACKED_8U,
	PACKED_16S,
	PACKED_16U
}

class WasmHeapType(index: u32) {
}
class WasmFunc extends WasmHeapType {
	def params: Array<WasmType>;
	def results: Array<WasmType>;

	new(index: u32, params, results) super(index) { }
}
class WasmStruct extends WasmHeapType {
	def parent: WasmStruct;
	def fields: Array<(WasmPacking, WasmType)>;
	
	new(index: u32, parent, fields) super(index) { }
}
class WasmArray extends WasmHeapType {
	def elem: (WasmPacking, WasmType);

	new(index: u32, elem) super(index) { }
}

enum WasmTypeConCode(code: byte, val: i7) {
	I32		(0x7F, -1),
	I64		(0x7E, -2),
	F32		(0x7D, -3),
	F64		(0x7C, -4),
	V128		(0x7B, -5), // ext:simd
	I8		(0x7A, -6), // ext:gc
	I16		(0x79, -7), // ext:gc
	FUNCREF		(0x70, -16),
	EXTERNREF	(0x6F, -17),
	ANYREF		(0x6E, -18), // ext:gc
	EQREF		(0x6D, -19), // ext:gc
	EmptyBlock	(0x40, -64), // XXX: move?
	REF_NULL	(0x6C, -20), // ext:gc
	REF		(0x6B, -21), // ext:gc
	I31REF		(0x6A, -22), // ext:gc
	DATAREF		(0x67, -25),
	ARRAYREF	(0x66, -26),
	NONEREF		(0x65, -27)
}

// Canonicalizes and encodes signatures into WASM function sigs
class WasmTypeTable(wasmType: Type -> WasmType) {
	def typeMap = HashMap<Signature, int>.new(Signature.hash, Signature.equals);
	def structMap = TypeUtil.newTypeMap<WasmStruct>();
	def arrayMap = TypeUtil.newTypeMap<WasmArray>();
	def buf = DataWriter.new().grow(100);
	var rawMap: HashMap<(int, int), int>;
	var count = 0;
	new() {
		rawMap = HashMap.new(hash, equal);
	}
	def add(sig: Signature) -> u32 {
		// fastpath: type-based lookup
		var index = typeMap[sig];
		if (index > 0) return u32.!(index - 1);
		// slowpath: encode a new entry into the table and de-duplicate
		var before = buf.pos;
		buf.put_uleb32(0x60); // signature declaration
		var params = sig.paramTypes;
		buf.put_uleb32(u32.!(params.length));
		for (p in params) wasmType(p).put(buf);
		var rets = sig.returnTypes;
		buf.put_uleb32(u32.!(rets.length));
		for (p in rets) wasmType(p).put(buf);
		var len = buf.pos - before;
		// raw map lookup will find any previous identical entry
		index = rawMap[(before, len)];
		if (index <= 0) {  // not found, add the entry
			index = ++count;
			rawMap[(before, len)] = index;
		} else {  // found, remove the new entry and remove the old one
			buf.trim(before);
		}
		typeMap[sig] = index;
		return u32.!(index - 1);
	}
	def hash(begin: int, len: int) -> int {
		var hashval = 0, end = begin + len;
		var array = buf.data;
		for (i = begin; i < end; i++) hashval = hashval * 31 + array[i];
		return hashval;
	}
	def equal(a: (int, int), b: (int, int)) -> bool {
		if (a.1 != b.1) return false;
		var array = buf.data;
		for (i < a.1) if (array[a.0 + i] != array[b.0 + i]) return false;
		return true;
	}
	def emit(out: DataWriter) {
		out.putr(buf.alias());
	}
}

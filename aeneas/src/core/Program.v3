// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.
enum InitState { Uninit, Running, Done }
// A collection of all the entities in a program, including the parsed files,
// the syntax tree (vst), the intermediate representation (ir), and dynamic portion
// (initialized state).
class Program {
	// file and argument portions of the program
	def ERROR = ErrorGen.new(15);		// error generator
	var files: Array<string>;		// the input files
	var inputs: Array<Array<byte>>;		// the input data
	var args: Array<string>;		// input arguments
	var opBuilder: IrOpMethodBuilder;
	// static parts of the program
	def typeCache = TypeCache.new();
	def typeEnv = TypeEnv.new(null, null, V3.lookupToplevelType);
	var layouts: HashMap<string, VstLayout>;
	var packings: HashMap<string, VstPacking>;
	var vst: VstModule;
	var ir: IrModule;
	var global: Type;
	var mainRootIndex = -1;
	var explicitName: string;
	var tprog: TargetProgram;
	// dynamic portion of the program, including initialized state
	var initState: Array<InitState>;
	var compRecords: Array<Record>;
	var strRecords: Array<Record>;
	var recordCount: int;
	var system: SystemCallState;

	new() {
		opBuilder = IrOpMethodBuilder.new(this);
	}
	def setInput(fname: string, input: Array<byte>) {
		files = [fname];
		inputs = [input];
	}
	def reportErrors() -> bool {
		if (ERROR.noErrors) return true;
		else ERROR.report();
		return false;
	}
	def getMain() -> IrSpec {
		return if (mainRootIndex >= 0, ir.roots[mainRootIndex].spec);
	}
	def name() -> string {
		if (explicitName != null) return explicitName;
		if (mainRootIndex < 0) return "program";
		return getMain().asMethod().source.receiver.name();
	}
	def globalType() -> Type {
		if (global == null) {
			var name = Arrays.concat(name(), "$global");
			var decl = VstComponent.new(false, null, Token.new("<generated>", name, 0, 0), null);
			var typeCon = V3Component_TypeCon.new(decl, typeCache);
			decl.memberMap = Strings.newMap();
			global = typeCon.create0();
			decl.recordIndex = vst.numComponents++;
		}
		return global;
	}
	def getComponentRecord(comp: VstComponent) -> Record {
		if (compRecords == null) return null;
		var index = comp.recordIndex;
		if (index >= compRecords.length) return null;
		return compRecords[index];
	}
	def setComponentRecord(comp: VstComponent, record: Record) {
		var index = comp.recordIndex;
		if (compRecords == null) {
			compRecords = Array.new(index + 1);
		} else if (index >= compRecords.length) {
			compRecords = Arrays.grow(compRecords, index + 1);
		}
		compRecords[index] = record;
	}
	def getStringRecord(sexpr: StringExpr) -> Record {
		var record = strRecords[sexpr.recordIndex];
		if (record == null) {
			var image = sexpr.array;
			record = newRecord(sexpr.exactType, image.length);
			Arrays.mapInto(image, Byte.box, record.values);
			strRecords[sexpr.recordIndex] = record;
		}
		return record;
	}
	def newRecord(rtype: Type, size: int) -> Record {
		return Record.new(recordCount++, rtype, Array<Val>.new(size));
	}
	def getDefaultValue(t: Type) -> Val {
		match (t.typeCon.kind) {
			VOID, BOOL, INT, FLOAT, ARRAY, COMPONENT, CLASS,
			CLOSURE, FUNCREF, ANYFUNC, ENUM, ENUM_SET, POINTER, REF, RANGE, RANGE_START => return Values.BOTTOM;
			VARIANT => {
				if (ir.defaultRecords != null) {
					var record = ir.defaultRecords[t];
					if (record != null) return record;
				} else {
					ir.defaultRecords = TypeUtil.newTypeMap();
				}
				var ct = ClassType.!(t);
				var decl = ct.classDecl;
				if (decl.superclass == null) {
					if (decl.cases.length > 0) t = decl.cases[0].decl.typeCon.create(t.nested);
				}
				var ic = ir.makeIrClass(t);
				var record = newRecord(t, ic.fields.length);
				ir.defaultRecords[t] = record;
				var typeArgs = ct.getTypeArgs();
				for (i < ic.fields.length) {
					var ft = ic.fields[i].fieldType;
					if (typeArgs != null) ft = ft.substitute(typeArgs);
					record.values[i] = getDefaultValue(ft);
				}
				return record;
			}
			TUPLE => {
				var at = Tuple.toTypeArray(t);
				var tv = TupleVal.new(Array<Val>.new(at.length));
				for (i < at.length) tv.values[i] = getDefaultValue(at[i]);
				return tv;
			}
			TYPE_PARAM,
			TYPE_VAR => return V3.fail1("cannot get default value for type %q", t.render);
		}
	}
	def hasTrivialDefaultValue(t: Type) -> bool {
		match (t.typeCon.kind) {
			TUPLE => {
				for (l = t.nested; l != null; l = l.tail) if(!hasTrivialDefaultValue(l.head)) return false;
			}
			VARIANT,
			TYPE_PARAM,
			TYPE_VAR => return false;
			_ => ;
		}
		return true;
	}
}
// Representation of the program appropriate for the target, e.g. a machine.
class TargetProgram(prog: Program) {
}
// Represents an object or an array in the program
class Record(id: int, rtype: Type, values: Array<Val>) extends Val {
	def equals(other: Val) -> bool {
		if (other == this) return true;
		if (V3.isVariant(rtype)) {
			if (other == null) {
				return V3.getVariantTag(rtype) == 0 && Values.deepEqualBottom(this.values);
			}
			if (!Record.?(other)) return false;
			var that = Record.!(other);
			return this.rtype == that.rtype && Values.deepEqual(this.values, Record.!(other).values);
		}
		return false;
	}
	def hash() -> int {
		if (V3.isVariant(rtype)) return Arrays.hash(rtype.hash, values, Values.hash);
		return id;
	}
}

// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility methods for working with the representation of tuples in the compiler
component Tuple {
	def TYPECON = Tuple_TypeCon.new();

	def toTypeList(paramType: Type) -> List<Type> {
		if (paramType == null || paramType == Void.TYPE) return null;
		if (paramType.typeCon == TYPECON) return paramType.nested;
		return List.new(paramType, null);
	}
	def toTypeArray(paramType: Type) -> Array<Type> {
		if (paramType == null || paramType == Void.TYPE) return [];
		if (paramType.typeCon == TYPECON) return Lists.toArray(paramType.nested);
		return [paramType];
	}
	def newType(types: List<Type>) -> Type {
		return TYPECON.create(types);
	}
	def length(paramType: Type) -> int {
		if (paramType == Void.TYPE) return 0;
		if (paramType.typeCon == TYPECON) return Lists.length(paramType.nested);
		return 1;
	}
	def fromTypeArray(a: Array<Type>) -> Type {
		if (a.length == 0) return Void.TYPE;
		if (a.length == 1) return a[0];
		return newType(Lists.fromArray(a));
	}
	def elementType(t: Type, index: int) -> Type {
		if (t.typeCon == TYPECON) return Lists.get(t.nested, index);
		return null;
	}
}
// A type constructor for tuples.
class Tuple_TypeCon extends TypeCon {
	new() super("tuple", Kind.TUPLE, -1, TypeUtil.globalCache) {
		singleton = Void.TYPE; // zero-arg tuple == void
	}

	def alloc(hash: int, nested: List<Type>) -> TupleType {
		return TupleType.new(hash, this, nested);
	}
	def create1(t: Type) -> Type {
		return t;
	}
	def renderType(buffer: StringBuilder, list: List<Type>) -> StringBuilder {
		if (list == null) {
			buffer.puts("void");
		} else if (list.tail == null) {
			list.head.render(buffer);
		} else {
			buffer.putc('(');
			Lists.render(buffer, Type.render, list);
			buffer.putc(')');
		}
		return buffer;
	}
}
// Representation of a tuple type.
class TupleType extends Type {
	new(hash: int, typeCon: TypeCon, nested: List<Type>) super(hash, typeCon, nested) { }
}

// 2-dimension single-precision vector.
type Vector2(x: float, y: float) #unboxed {
	def add(that: Vector2) -> Vector2 {
		return Vector2(this.x + that.x, this.y + that.y);
	}
	def sub(that: Vector2) -> Vector2 {
		return Vector2(this.x - that.x, this.y - that.y);
	}
	def scale(factor: float) -> Vector2 {
		return Vector2(this.x * factor, this.y * factor);
	}
	def inverse() -> Vector2 {
		return Vector2(0f - this.x, 0f - this.y);
	}
	def dot(that: Vector2) -> float {
		return this.x * that.x + this.y * that.y;
	}
	def unit() -> Vector2 {
		var len = length();
		return if(len == 1f, this, scale(1f / len));
	}
	def length() -> float {
		return float.sqrt(this.x * this.x + this.y * this.y);
	}
	def cross(that: Vector2) -> float {
		return this.x * that.y - this.y * that.x;
	}
}

// 3-dimension single-precision vector.
type Vector3(x: float, y: float, z: float) #unboxed {
	def add(that: Vector3) -> Vector3 {
		return Vector3(this.x + that.x, this.y + that.y, this.z + that.z);
	}
	def sub(that: Vector3) -> Vector3 {
		return Vector3(this.x - that.x, this.y - that.y, this.z - that.z);
	}
	def scale(factor: float) -> Vector3 {
		return Vector3(this.x * factor, this.y * factor, this.z * factor);
	}
	def inverse() -> Vector3 {
		return Vector3(0f - this.x, 0f - this.y, 0f - this.z);
	}
	def dot(that: Vector3) -> float {
		return this.x * that.x + this.y * that.y + this.z * that.z;
	}
	def unit() -> Vector3 {
		var len = length();
		return if(len == 1f, this, scale(1f / len));
	}
	def length() -> float {
		return float.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	def cross(that: Vector3) -> Vector3 {
		return Vector3(this.y * that.z - this.z * that.y,
				0f - (this.x * that.z - this.z * that.x),
				this.x * that.y - this.y * that.x);
	}
}
